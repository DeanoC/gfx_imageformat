//Auto generated by formatgen on Aug 14 2019
#pragma once

/* TinyImageFormat is a library about the encodings of pixel typically
 * encountered in real time graphics.
 *
 * Like modern graphics API it is enumeration based but it also provides an API
 * for reasoning about that enumeration programmatically.
 *
 * Whilst not optimal due to number of formats it supports , it intends to
 * provide fast enough for support for its function, that in most cases it will
 * be fine.
 *
 * This is because internally every format has a descriptor packed into a 64 bit
 * code word.
 * This code word is used to generate the header and it isn't used by the API
 * itself having been burnt out by the code generator but it can be used at
 * runtime if desired and likely will to provide exotic packed formats that
 * don't get there own enumeration value but can be expressed via a descriptor.
 *
 * Additionally it provide ways of accessing pixels encoded in the specified
 * format for most pixel formats. The hope is eventually to get 100% but not
 * there yet. This allows you to effectively read almost any pixel formated data
 * with this library into a form you can manipulate and use easily.
 *
 * To assist with working with graphics API converters to and from the 3 main
 * APIs are provided, Vulkan, D3D12 and Metal. These are self contained and do
 * not require the APIs themselves.
 *
 * This file is large due to unrolling most decoding etc. Function are inline
 * and switch based, allowing the compiler to eliminate and collapse when
 * possible, however particularly the Fetch functions aren't anywhere near as
 * fast as the could be if heavily optimised for specific formats/layouts.
 *
 * However this should compile to be fast enough for many use cases.
 *
 * Where possible for C++ users functions are constexpr.
 *
 * It is MIT licensed and borrows/builds on code/specs including but not
 * limited to
 * Microsoft's Chris Walbourn DXTextureTool
 * Rygerous public domain Half to float code
 * Khronos DFD specifications
 * Khronos Vulkan Specification
 * Microsoft D3D11/D3D12 Specifications
 * Apple Metal documentation
 * DDS Loaders from various sources (Humus, Confetti FX, DXTextureTool)
 *
 * Definitions
 * -----------
 *
 * Pixel
 * We define a pixel as upto 4 channels representing a single 'colour'
 * Depending on context its may not be addressable directly
 * When fetching, pixels are returned as 4 fully decoded doubles
 *
 * Logical Channels (TinyImageFormat_LogicalChannel)
 * Logical channel are the usual way you would ask for a particular channel,
 * so asking about LC_Red while get you data on the red channel however its
 * physically encoded in the data.
 *
 * Physical Channels (TinyImageFormat_PhysicalChannel)
 * Physical channels are the inverse of logical channels, that have no meaning
 * beyond the position in the data itself.
 *
 * Channel Constants
 * Both Logical and Physical channels support return constant 0 or 1 if asked
 * for data outside what encoded.
 *
 * Blocks
 * A block is the smallest addressable element this format refers to. Blocks
 * have up to 3 dimensions (though no format currently uses the 3rd).
 * For single pixel formats this will be 1x1x1.
 * For block compressed format a common value is 4x4x1.
 * Shared channels or very tightly packed this is how many pixels are combined
 * into one addressable unit.
 *
 * API
 * ---
 * The primary enumeration is simply TinyImageFormat, everything else supports
 * this enum.
 * All functions, enums etc. are prefixed with TinyImageFormat_ this is often
 * removed in the api docs to save space.
 *
 * Defines
 * TinyImageFormat_Count - how many formats in total
 *
 * Enums
 * TinyImageFormat - Count entries, one for each format supported
 * TinyImageFormat_Code - one per format, these are the 64 bit descriptors
 * LogicalChannel - values for logical channel or constants
 * 						- LC_Red - Red channel is specified
 * 						- LC_Green - Green channel is specified
 * 						- LC_Blue - Blue channel is specified
 * 						- LC_Alpha - Alpha channel is specified
 * 						- LC_Depth - Depth channel is specified
 * 						- LC_Stencil - Stencil channel is specified
 * 						- LC_1 - constant 1 will be returned
 * 						- LC_0 - constant 0 will be return
 * PhysicalChannel - values for physical channel or constants
 * 						- PC_0 - Leftmost channel
 * 						- PC_1 - 2nd channel
 * 						- PC_2 - 3rd channel
 * 						- PC_3 - 4th channel
 * 						- PC_CONST_1 - constant 1 will be returned
 * 						- PC_CONST_0 - constant 0 will be return
 *
 * Information Functions
 * -----------
 * Name( fmt ) - Human C string with the name of this fmt
 * FromName( name ) - lookup the format given the name as a C String (fast)
 * IsDepthOnly( fmt ) - true if just a depth channel
 * IsStencilOnly( fmt ) - true if just a stencil channel
 * IsDepthAndStencil( fmt ) - if has both depth and stencil channel
 * IsCompressed( fmt ) - true if its a compressed format (aka block)
 * IsCLUT( fmt ) - true if data is index into a CLUT (Colour Look Up Table)
 * IsFloat( fmt ) - is the data in floating point
 * IsNormalised( fmt ) - return true if data will be within 0 to 1 or -1 to 1
 * IsSigned( fmt ) - does the data include negatives
 * IsSRGB( fmt ) - is the data encoded using sRGB non linear encoding
 * IsHomogenous( fmt ) - is the encoding the same for every channel
 * WidthOfBlock( fmt ) - How many pixels in the x dimension for a block
 * HeightOfBlock( fmt ) - How many pixels in the y dimension for a block
 * DepthOfBlock( fmt ) 	- How many pixels in the z dimension for a block
 * PixelCountOfBlock( fmt ) - How many pixels in total for a block
 * BitSizeOfBlock( fmt ) - How big in bits is a single block.
 * ChannelCount( fmt ) - How many channels are actually encoded
 *
 * Logical Channel Functions
 * -------------------------
 * ChannelBitWidth( fmt, logical channel ) - how wide in bits is the channel
 * Min( fmt, logical channel ) - minimum possible value for the channel
 * Max( fmt, logical channel ) - maximum possible value for the channel
 * LogicalChannelToPhysical( fmt, logical channel )
 * 											- what physical channel is the logical channel stored in
 * 											- or constant 0 or 1 if its not physically stored
 *
 * Pixel Decoder Functions
 * -----------------------
 * CanFetchLogicalPixels( fmt ) - Can FetchLogicalPixels work with this format?
 * FetchLogicalPixels(fmt, in pointer, out pixels) -
 * 							- pixels should be a pointer to 4 * PixelCounfOfBlack doubles
 * 							- does full decode and remapping into logical channels
 * 							- include constants etc. so returned result can be used directly
 *
 * Pixel Decoder Helper Functions
 * -----------------------
 * UFloat10ToDouble( uint16_t ) - returns the value stored as a 10 bit UFloat
 * UFloat11ToDouble( uint16_t ) - returns the value stored as a 11 bit UFloat
 * SharedE5B9G9R9UFloatToDoubles( uint32 ) - return the pixel stored in shared
 * 															- shared 5 bit exponent,  9 bit mantissa for RGB
 * HalfAsUintToDouble( uint16_t ) returns the value stored as a 16 bit SFloat
 * LookupSRGB( uint8_t) returns the value for an 8 bit sRGB encoded value
 *
 * Physical Channel Functions (in general use the Logical Channels)
 * ------------------
 * ChannelBitWidthAtPhysical( fmt, physical channel )
 * 											- how wide in bits is the channel
 * MinAtPhysical( fmt, physical channel ) - min possible value for the channel
 * MaxAtPhysical( fmt, physical channel ) - max possible value for the channel
 * PhysicalChannelToLogical( fmt, physical channel)
 * 											- what logical channel does a physical channel map to.
 * 											- Or a constant 0 or 1
 *
 * Graphics API Functions
 * ------------------
 * FromVkFormat( VkFormat ) converts from or UNDEFINED if not possible
 * ToVkFormat( fmt ) converts to or VK_FORMAT_UNDEFINED if not possible
 * FromDXGI_FORMAT( DXGI_FORMAT) converts from or UNDEFINED if not possible
 * ToDXGI_FORMAT( fmt ) converts to or DXGI_FORMAT_UNKNOWN if not possible
 * DXGI_FORMATToTypeless( fmt ) returns the DXGI typeless format if possible
 * FromMetal( MTLPixelFormat) converts from or UNDEFINED if not possible
 * ToMetal( fmt) converts to or MTLPixelFormatInvalid if not possible
 *
 *
 * Implementation Details
 * ----------------------
 * Format Namespaces
 * Internally formats are split into sets called namespace with completely
 * different descriptor encodings. The largest is the PACK namespace which can
 * encode a huge range of packed single pixel formats. The enumerations are just
 * the common cases.
 * Each compression family has its own namespace and also colour look up tables.
 * Shared component and various video formats are on the list of things TODO.
 *
 * The namespace size is huge, allowing for many different future formats.
 *
 * PACK namespace
 * The name of the format specifies exactly the channel order with only one
 * factor the PACK special bit.
 * If a format can be encoded word aligned (8, 16, 32, 64 bit alignment) then
 * PACK isn't set and the physical channel is read left to right
 * so R8G8B8A8 is R = PC_0, G = PC_1, B = PC_2, A = PC_3 and can would be read
 * uint8_t* data = ...;
 * R = data[0];
 * G = data[1];
 * B = data[2];
 * A = data[3];
 * If a format can't be simply decoded via word aligned reads then the PACK bit
 * is set and then the names leftsmost element is the lowest bit position going
 * up as you read across the format name to the right.
 * The actual bit size of each channel is read from the descriptor code.
 * so R5G5B5A1 is the first lowest 5 bits being R, next 5 is G then B and the last
 * bit being A.
 * uint16_t data;
 * R = (data >> 0) & 0x1f;
 * G = (data >> 5) & 0x1f;
 * B = (data >> 10) & 0x1f;
 * A = (data >> 15) & 0x1;
 *
 */
#define  TINYIMAGEFORMAT_IMAGEFORMAT_H
typedef enum TinyImageFormat {
	TinyImageFormat_UNDEFINED = 0,
	TinyImageFormat_R1_UNORM = 1,
	TinyImageFormat_R2_UNORM = 2,
	TinyImageFormat_R4_UNORM = 3,
	TinyImageFormat_R4G4_UNORM = 4,
	TinyImageFormat_G4R4_UNORM = 5,
	TinyImageFormat_A8_UNORM = 6,
	TinyImageFormat_R8_UNORM = 7,
	TinyImageFormat_R8_SNORM = 8,
	TinyImageFormat_R8_UINT = 9,
	TinyImageFormat_R8_SINT = 10,
	TinyImageFormat_R8_SRGB = 11,
	TinyImageFormat_B2G3R3_UNORM = 12,
	TinyImageFormat_R4G4B4A4_UNORM = 13,
	TinyImageFormat_R4G4B4X4_UNORM = 14,
	TinyImageFormat_B4G4R4A4_UNORM = 15,
	TinyImageFormat_B4G4R4X4_UNORM = 16,
	TinyImageFormat_A4R4G4B4_UNORM = 17,
	TinyImageFormat_X4R4G4B4_UNORM = 18,
	TinyImageFormat_A4B4G4R4_UNORM = 19,
	TinyImageFormat_X4B4G4R4_UNORM = 20,
	TinyImageFormat_R5G6B5_UNORM = 21,
	TinyImageFormat_B5G6R5_UNORM = 22,
	TinyImageFormat_R5G5B5A1_UNORM = 23,
	TinyImageFormat_B5G5R5A1_UNORM = 24,
	TinyImageFormat_A1B5G5R5_UNORM = 25,
	TinyImageFormat_A1R5G5B5_UNORM = 26,
	TinyImageFormat_R5G5B5X1_UNORM = 27,
	TinyImageFormat_B5G5R5X1_UNORM = 28,
	TinyImageFormat_X1R5G5B5_UNORM = 29,
	TinyImageFormat_X1B5G5R5_UNORM = 30,
	TinyImageFormat_B2G3R3A8_UNORM = 31,
	TinyImageFormat_R8G8_UNORM = 32,
	TinyImageFormat_R8G8_SNORM = 33,
	TinyImageFormat_G8R8_UNORM = 34,
	TinyImageFormat_G8R8_SNORM = 35,
	TinyImageFormat_R8G8_UINT = 36,
	TinyImageFormat_R8G8_SINT = 37,
	TinyImageFormat_R8G8_SRGB = 38,
	TinyImageFormat_R16_UNORM = 39,
	TinyImageFormat_R16_SNORM = 40,
	TinyImageFormat_R16_UINT = 41,
	TinyImageFormat_R16_SINT = 42,
	TinyImageFormat_R16_SFLOAT = 43,
	TinyImageFormat_R16_SBFLOAT = 44,
	TinyImageFormat_R8G8B8_UNORM = 45,
	TinyImageFormat_R8G8B8_SNORM = 46,
	TinyImageFormat_R8G8B8_UINT = 47,
	TinyImageFormat_R8G8B8_SINT = 48,
	TinyImageFormat_R8G8B8_SRGB = 49,
	TinyImageFormat_B8G8R8_UNORM = 50,
	TinyImageFormat_B8G8R8_SNORM = 51,
	TinyImageFormat_B8G8R8_UINT = 52,
	TinyImageFormat_B8G8R8_SINT = 53,
	TinyImageFormat_B8G8R8_SRGB = 54,
	TinyImageFormat_R8G8B8A8_UNORM = 55,
	TinyImageFormat_R8G8B8A8_SNORM = 56,
	TinyImageFormat_R8G8B8A8_UINT = 57,
	TinyImageFormat_R8G8B8A8_SINT = 58,
	TinyImageFormat_R8G8B8A8_SRGB = 59,
	TinyImageFormat_B8G8R8A8_UNORM = 60,
	TinyImageFormat_B8G8R8A8_SNORM = 61,
	TinyImageFormat_B8G8R8A8_UINT = 62,
	TinyImageFormat_B8G8R8A8_SINT = 63,
	TinyImageFormat_B8G8R8A8_SRGB = 64,
	TinyImageFormat_R8G8B8X8_UNORM = 65,
	TinyImageFormat_B8G8R8X8_UNORM = 66,
	TinyImageFormat_R16G16_UNORM = 67,
	TinyImageFormat_G16R16_UNORM = 68,
	TinyImageFormat_R16G16_SNORM = 69,
	TinyImageFormat_G16R16_SNORM = 70,
	TinyImageFormat_R16G16_UINT = 71,
	TinyImageFormat_R16G16_SINT = 72,
	TinyImageFormat_R16G16_SFLOAT = 73,
	TinyImageFormat_R16G16_SBFLOAT = 74,
	TinyImageFormat_R32_UINT = 75,
	TinyImageFormat_R32_SINT = 76,
	TinyImageFormat_R32_SFLOAT = 77,
	TinyImageFormat_A2R10G10B10_UNORM = 78,
	TinyImageFormat_A2R10G10B10_UINT = 79,
	TinyImageFormat_A2B10G10R10_UNORM = 80,
	TinyImageFormat_A2B10G10R10_UINT = 81,
	TinyImageFormat_R10G10B10A2_UNORM = 82,
	TinyImageFormat_B10G10R10A2_UNORM = 83,
	TinyImageFormat_B10G10R10A2_UINT = 84,
	TinyImageFormat_B10G11R11_UFLOAT = 85,
	TinyImageFormat_E5B9G9R9_UFLOAT = 86,
	TinyImageFormat_R16G16B16_UNORM = 87,
	TinyImageFormat_R16G16B16_SNORM = 88,
	TinyImageFormat_R16G16B16_UINT = 89,
	TinyImageFormat_R16G16B16_SINT = 90,
	TinyImageFormat_R16G16B16_SFLOAT = 91,
	TinyImageFormat_R16G16B16_SBFLOAT = 92,
	TinyImageFormat_R16G16B16A16_UNORM = 93,
	TinyImageFormat_R16G16B16A16_SNORM = 94,
	TinyImageFormat_R16G16B16A16_UINT = 95,
	TinyImageFormat_R16G16B16A16_SINT = 96,
	TinyImageFormat_R16G16B16A16_SFLOAT = 97,
	TinyImageFormat_R16G16B16A16_SBFLOAT = 98,
	TinyImageFormat_R32G32_UINT = 99,
	TinyImageFormat_R32G32_SINT = 100,
	TinyImageFormat_R32G32_SFLOAT = 101,
	TinyImageFormat_R32G32B32_UINT = 102,
	TinyImageFormat_R32G32B32_SINT = 103,
	TinyImageFormat_R32G32B32_SFLOAT = 104,
	TinyImageFormat_R32G32B32A32_UINT = 105,
	TinyImageFormat_R32G32B32A32_SINT = 106,
	TinyImageFormat_R32G32B32A32_SFLOAT = 107,
	TinyImageFormat_R64_UINT = 108,
	TinyImageFormat_R64_SINT = 109,
	TinyImageFormat_R64_SFLOAT = 110,
	TinyImageFormat_R64G64_UINT = 111,
	TinyImageFormat_R64G64_SINT = 112,
	TinyImageFormat_R64G64_SFLOAT = 113,
	TinyImageFormat_R64G64B64_UINT = 114,
	TinyImageFormat_R64G64B64_SINT = 115,
	TinyImageFormat_R64G64B64_SFLOAT = 116,
	TinyImageFormat_R64G64B64A64_UINT = 117,
	TinyImageFormat_R64G64B64A64_SINT = 118,
	TinyImageFormat_R64G64B64A64_SFLOAT = 119,
	TinyImageFormat_D16_UNORM = 120,
	TinyImageFormat_X8_D24_UNORM = 121,
	TinyImageFormat_D32_SFLOAT = 122,
	TinyImageFormat_S8_UINT = 123,
	TinyImageFormat_D16_UNORM_S8_UINT = 124,
	TinyImageFormat_D24_UNORM_S8_UINT = 125,
	TinyImageFormat_D32_SFLOAT_S8_UINT = 126,
	TinyImageFormat_DXBC1_RGB_UNORM = 127,
	TinyImageFormat_DXBC1_RGB_SRGB = 128,
	TinyImageFormat_DXBC1_RGBA_UNORM = 129,
	TinyImageFormat_DXBC1_RGBA_SRGB = 130,
	TinyImageFormat_DXBC2_UNORM = 131,
	TinyImageFormat_DXBC2_SRGB = 132,
	TinyImageFormat_DXBC3_UNORM = 133,
	TinyImageFormat_DXBC3_SRGB = 134,
	TinyImageFormat_DXBC4_UNORM = 135,
	TinyImageFormat_DXBC4_SNORM = 136,
	TinyImageFormat_DXBC5_UNORM = 137,
	TinyImageFormat_DXBC5_SNORM = 138,
	TinyImageFormat_DXBC6H_UFLOAT = 139,
	TinyImageFormat_DXBC6H_SFLOAT = 140,
	TinyImageFormat_DXBC7_UNORM = 141,
	TinyImageFormat_DXBC7_SRGB = 142,
	TinyImageFormat_PVRTC1_2BPP_UNORM = 143,
	TinyImageFormat_PVRTC1_4BPP_UNORM = 144,
	TinyImageFormat_PVRTC2_2BPP_UNORM = 145,
	TinyImageFormat_PVRTC2_4BPP_UNORM = 146,
	TinyImageFormat_PVRTC1_2BPP_SRGB = 147,
	TinyImageFormat_PVRTC1_4BPP_SRGB = 148,
	TinyImageFormat_PVRTC2_2BPP_SRGB = 149,
	TinyImageFormat_PVRTC2_4BPP_SRGB = 150,
	TinyImageFormat_ETC2_R8G8B8_UNORM = 151,
	TinyImageFormat_ETC2_R8G8B8_SRGB = 152,
	TinyImageFormat_ETC2_R8G8B8A1_UNORM = 153,
	TinyImageFormat_ETC2_R8G8B8A1_SRGB = 154,
	TinyImageFormat_ETC2_R8G8B8A8_UNORM = 155,
	TinyImageFormat_ETC2_R8G8B8A8_SRGB = 156,
	TinyImageFormat_ETC2_EAC_R11_UNORM = 157,
	TinyImageFormat_ETC2_EAC_R11_SNORM = 158,
	TinyImageFormat_ETC2_EAC_R11G11_UNORM = 159,
	TinyImageFormat_ETC2_EAC_R11G11_SNORM = 160,
	TinyImageFormat_ASTC_4x4_UNORM = 161,
	TinyImageFormat_ASTC_4x4_SRGB = 162,
	TinyImageFormat_ASTC_5x4_UNORM = 163,
	TinyImageFormat_ASTC_5x4_SRGB = 164,
	TinyImageFormat_ASTC_5x5_UNORM = 165,
	TinyImageFormat_ASTC_5x5_SRGB = 166,
	TinyImageFormat_ASTC_6x5_UNORM = 167,
	TinyImageFormat_ASTC_6x5_SRGB = 168,
	TinyImageFormat_ASTC_6x6_UNORM = 169,
	TinyImageFormat_ASTC_6x6_SRGB = 170,
	TinyImageFormat_ASTC_8x5_UNORM = 171,
	TinyImageFormat_ASTC_8x5_SRGB = 172,
	TinyImageFormat_ASTC_8x6_UNORM = 173,
	TinyImageFormat_ASTC_8x6_SRGB = 174,
	TinyImageFormat_ASTC_8x8_UNORM = 175,
	TinyImageFormat_ASTC_8x8_SRGB = 176,
	TinyImageFormat_ASTC_10x5_UNORM = 177,
	TinyImageFormat_ASTC_10x5_SRGB = 178,
	TinyImageFormat_ASTC_10x6_UNORM = 179,
	TinyImageFormat_ASTC_10x6_SRGB = 180,
	TinyImageFormat_ASTC_10x8_UNORM = 181,
	TinyImageFormat_ASTC_10x8_SRGB = 182,
	TinyImageFormat_ASTC_10x10_UNORM = 183,
	TinyImageFormat_ASTC_10x10_SRGB = 184,
	TinyImageFormat_ASTC_12x10_UNORM = 185,
	TinyImageFormat_ASTC_12x10_SRGB = 186,
	TinyImageFormat_ASTC_12x12_UNORM = 187,
	TinyImageFormat_ASTC_12x12_SRGB = 188,
	TinyImageFormat_CLUT_P4 = 189,
	TinyImageFormat_CLUT_P4A4 = 190,
	TinyImageFormat_CLUT_P8 = 191,
	TinyImageFormat_CLUT_P8A8 = 192,
} TinyImageFormat;

typedef enum TinyImageFormat_Code {
	TinyImageFormat_Code_UNDEFINED = 0x0000000000000000ULL,
	TinyImageFormat_Code_R1_UNORM = 0x0000D9000000C000ULL,
	TinyImageFormat_Code_R2_UNORM = 0x0000D90000013000ULL,
	TinyImageFormat_Code_R4_UNORM = 0x0000D90000022000ULL,
	TinyImageFormat_Code_R4G4_UNORM = 0x0008D84000421000ULL,
	TinyImageFormat_Code_G4R4_UNORM = 0x0008D80800421000ULL,
	TinyImageFormat_Code_A8_UNORM = 0x0000C91800040000ULL,
	TinyImageFormat_Code_R8_UNORM = 0x0000D90000040000ULL,
	TinyImageFormat_Code_R8_SNORM = 0x0001590000040000ULL,
	TinyImageFormat_Code_R8_UINT = 0x0001D90000040000ULL,
	TinyImageFormat_Code_R8_SINT = 0x0002590000040000ULL,
	TinyImageFormat_Code_R8_SRGB = 0x0003D90000040000ULL,
	TinyImageFormat_Code_B2G3R3_UNORM = 0x0088D05006311000ULL,
	TinyImageFormat_Code_R4G4B4A4_UNORM = 0x0888B44108421000ULL,
	TinyImageFormat_Code_R4G4B4X4_UNORM = 0x0888D44108421000ULL,
	TinyImageFormat_Code_B4G4R4A4_UNORM = 0x0888B05108421000ULL,
	TinyImageFormat_Code_B4G4R4X4_UNORM = 0x0888D05108421000ULL,
	TinyImageFormat_Code_A4R4G4B4_UNORM = 0x0888A21908421000ULL,
	TinyImageFormat_Code_X4R4G4B4_UNORM = 0x0889A22908421000ULL,
	TinyImageFormat_Code_A4B4G4R4_UNORM = 0x0888829908421000ULL,
	TinyImageFormat_Code_X4B4G4R4_UNORM = 0x088982A908421000ULL,
	TinyImageFormat_Code_R5G6B5_UNORM = 0x0088D4400A629000ULL,
	TinyImageFormat_Code_B5G6R5_UNORM = 0x0088D0500A629000ULL,
	TinyImageFormat_Code_R5G5B5A1_UNORM = 0x0888B4404A529000ULL,
	TinyImageFormat_Code_B5G5R5A1_UNORM = 0x0888B0504A529000ULL,
	TinyImageFormat_Code_A1B5G5R5_UNORM = 0x088882994A509000ULL,
	TinyImageFormat_Code_A1R5G5B5_UNORM = 0x0888A2194A509000ULL,
	TinyImageFormat_Code_R5G5B5X1_UNORM = 0x1888D4404A529000ULL,
	TinyImageFormat_Code_B5G5R5X1_UNORM = 0x1888D0504A529000ULL,
	TinyImageFormat_Code_X1R5G5B5_UNORM = 0x0889A2294A509000ULL,
	TinyImageFormat_Code_X1B5G5R5_UNORM = 0x088982A94A509000ULL,
	TinyImageFormat_Code_B2G3R3A8_UNORM = 0x0888B05206311000ULL,
	TinyImageFormat_Code_R8G8_UNORM = 0x0008D84000840000ULL,
	TinyImageFormat_Code_R8G8_SNORM = 0x0011584000840000ULL,
	TinyImageFormat_Code_G8R8_UNORM = 0x0008D80800840000ULL,
	TinyImageFormat_Code_G8R8_SNORM = 0x0011580800840000ULL,
	TinyImageFormat_Code_R8G8_UINT = 0x0019D84000840000ULL,
	TinyImageFormat_Code_R8G8_SINT = 0x0022584000840000ULL,
	TinyImageFormat_Code_R8G8_SRGB = 0x003BD84000840000ULL,
	TinyImageFormat_Code_R16_UNORM = 0x0000D90000068000ULL,
	TinyImageFormat_Code_R16_SNORM = 0x0001590000068000ULL,
	TinyImageFormat_Code_R16_UINT = 0x0001D90000068000ULL,
	TinyImageFormat_Code_R16_SINT = 0x0002590000068000ULL,
	TinyImageFormat_Code_R16_SFLOAT = 0x0003590000068000ULL,
	TinyImageFormat_Code_R16_SBFLOAT = 0x0004590000068000ULL,
	TinyImageFormat_Code_R8G8B8_UNORM = 0x0088D44010840000ULL,
	TinyImageFormat_Code_R8G8B8_SNORM = 0x0111544010840000ULL,
	TinyImageFormat_Code_R8G8B8_UINT = 0x0199D44010840000ULL,
	TinyImageFormat_Code_R8G8B8_SINT = 0x0222544010840000ULL,
	TinyImageFormat_Code_R8G8B8_SRGB = 0x03BBD44010840000ULL,
	TinyImageFormat_Code_B8G8R8_UNORM = 0x0088D05010840000ULL,
	TinyImageFormat_Code_B8G8R8_SNORM = 0x0111505010840000ULL,
	TinyImageFormat_Code_B8G8R8_UINT = 0x0199D05010840000ULL,
	TinyImageFormat_Code_B8G8R8_SINT = 0x0222505010840000ULL,
	TinyImageFormat_Code_B8G8R8_SRGB = 0x03BBD05010840000ULL,
	TinyImageFormat_Code_R8G8B8A8_UNORM = 0x0888B44210840000ULL,
	TinyImageFormat_Code_R8G8B8A8_SNORM = 0x1111344210840000ULL,
	TinyImageFormat_Code_R8G8B8A8_UINT = 0x1999B44210840000ULL,
	TinyImageFormat_Code_R8G8B8A8_SINT = 0x2222344210840000ULL,
	TinyImageFormat_Code_R8G8B8A8_SRGB = 0x0BBBB44210840000ULL,
	TinyImageFormat_Code_B8G8R8A8_UNORM = 0x0888B05210840000ULL,
	TinyImageFormat_Code_B8G8R8A8_SNORM = 0x1111305210840000ULL,
	TinyImageFormat_Code_B8G8R8A8_UINT = 0x1999B05210840000ULL,
	TinyImageFormat_Code_B8G8R8A8_SINT = 0x2222305210840000ULL,
	TinyImageFormat_Code_B8G8R8A8_SRGB = 0x0BBBB05210840000ULL,
	TinyImageFormat_Code_R8G8B8X8_UNORM = 0x0888D44210840000ULL,
	TinyImageFormat_Code_B8G8R8X8_UNORM = 0x0888D05210840000ULL,
	TinyImageFormat_Code_R16G16_UNORM = 0x0008D84000D68000ULL,
	TinyImageFormat_Code_G16R16_UNORM = 0x0008D80800D68000ULL,
	TinyImageFormat_Code_R16G16_SNORM = 0x0011584000D68000ULL,
	TinyImageFormat_Code_G16R16_SNORM = 0x0011580800D68000ULL,
	TinyImageFormat_Code_R16G16_UINT = 0x0019D84000D68000ULL,
	TinyImageFormat_Code_R16G16_SINT = 0x0022584000D68000ULL,
	TinyImageFormat_Code_R16G16_SFLOAT = 0x0033584000D68000ULL,
	TinyImageFormat_Code_R16G16_SBFLOAT = 0x0044584000D68000ULL,
	TinyImageFormat_Code_R32_UINT = 0x0001D90000078000ULL,
	TinyImageFormat_Code_R32_SINT = 0x0002590000078000ULL,
	TinyImageFormat_Code_R32_SFLOAT = 0x0003590000078000ULL,
	TinyImageFormat_Code_A2R10G10B10_UNORM = 0x0888A21A94A11000ULL,
	TinyImageFormat_Code_A2R10G10B10_UINT = 0x1999A21A94A11000ULL,
	TinyImageFormat_Code_A2B10G10R10_UNORM = 0x0888829A94A11000ULL,
	TinyImageFormat_Code_A2B10G10R10_UINT = 0x1999829A94A11000ULL,
	TinyImageFormat_Code_R10G10B10A2_UNORM = 0x0888B44094A51000ULL,
	TinyImageFormat_Code_B10G10R10A2_UNORM = 0x0888B05094A51000ULL,
	TinyImageFormat_Code_B10G10R10A2_UINT = 0x1999B05094A51000ULL,
	TinyImageFormat_Code_B10G11R11_UFLOAT = 0x02AAD05016B51000ULL,
	TinyImageFormat_Code_E5B9G9R9_UFLOAT = 0x2AA9829A52929000ULL,
	TinyImageFormat_Code_R16G16B16_UNORM = 0x0088D4401AD68000ULL,
	TinyImageFormat_Code_R16G16B16_SNORM = 0x011154401AD68000ULL,
	TinyImageFormat_Code_R16G16B16_UINT = 0x0199D4401AD68000ULL,
	TinyImageFormat_Code_R16G16B16_SINT = 0x022254401AD68000ULL,
	TinyImageFormat_Code_R16G16B16_SFLOAT = 0x033354401AD68000ULL,
	TinyImageFormat_Code_R16G16B16_SBFLOAT = 0x044454401AD68000ULL,
	TinyImageFormat_Code_R16G16B16A16_UNORM = 0x0888B4435AD68000ULL,
	TinyImageFormat_Code_R16G16B16A16_SNORM = 0x111134435AD68000ULL,
	TinyImageFormat_Code_R16G16B16A16_UINT = 0x1999B4435AD68000ULL,
	TinyImageFormat_Code_R16G16B16A16_SINT = 0x222234435AD68000ULL,
	TinyImageFormat_Code_R16G16B16A16_SFLOAT = 0x333334435AD68000ULL,
	TinyImageFormat_Code_R16G16B16A16_SBFLOAT = 0x444434435AD68000ULL,
	TinyImageFormat_Code_R32G32_UINT = 0x0019D84000F78000ULL,
	TinyImageFormat_Code_R32G32_SINT = 0x0022584000F78000ULL,
	TinyImageFormat_Code_R32G32_SFLOAT = 0x0033584000F78000ULL,
	TinyImageFormat_Code_R32G32B32_UINT = 0x0199D4401EF78000ULL,
	TinyImageFormat_Code_R32G32B32_SINT = 0x022254401EF78000ULL,
	TinyImageFormat_Code_R32G32B32_SFLOAT = 0x033354401EF78000ULL,
	TinyImageFormat_Code_R32G32B32A32_UINT = 0x1999B443DEF78000ULL,
	TinyImageFormat_Code_R32G32B32A32_SINT = 0x22223443DEF78000ULL,
	TinyImageFormat_Code_R32G32B32A32_SFLOAT = 0x33333443DEF78000ULL,
	TinyImageFormat_Code_R64_UINT = 0x0001D90000080000ULL,
	TinyImageFormat_Code_R64_SINT = 0x0002590000080000ULL,
	TinyImageFormat_Code_R64_SFLOAT = 0x0003590000080000ULL,
	TinyImageFormat_Code_R64G64_UINT = 0x0019D84001080000ULL,
	TinyImageFormat_Code_R64G64_SINT = 0x0022584001080000ULL,
	TinyImageFormat_Code_R64G64_SFLOAT = 0x0033584001080000ULL,
	TinyImageFormat_Code_R64G64B64_UINT = 0x0199D44021080000ULL,
	TinyImageFormat_Code_R64G64B64_SINT = 0x0222544021080000ULL,
	TinyImageFormat_Code_R64G64B64_SFLOAT = 0x0333544021080000ULL,
	TinyImageFormat_Code_R64G64B64A64_UINT = 0x1999B44421080000ULL,
	TinyImageFormat_Code_R64G64B64A64_SINT = 0x2222344421080000ULL,
	TinyImageFormat_Code_R64G64B64A64_SFLOAT = 0x3333344421080000ULL,
	TinyImageFormat_Code_D16_UNORM = 0x0000000001809001ULL,
	TinyImageFormat_Code_X8_D24_UNORM = 0x0000000006266001ULL,
	TinyImageFormat_Code_D32_SFLOAT = 0x0000000003812001ULL,
	TinyImageFormat_Code_S8_UINT = 0x0000000002904001ULL,
	TinyImageFormat_Code_D16_UNORM_S8_UINT = 0x000000000942A001ULL,
	TinyImageFormat_Code_D24_UNORM_S8_UINT = 0x000000000942E001ULL,
	TinyImageFormat_Code_D32_SFLOAT_S8_UINT = 0x000000000B433001ULL,
	TinyImageFormat_Code_DXBC1_RGB_UNORM = 0x0000000000100002ULL,
	TinyImageFormat_Code_DXBC1_RGB_SRGB = 0x0000000000108002ULL,
	TinyImageFormat_Code_DXBC1_RGBA_UNORM = 0x0000000000181002ULL,
	TinyImageFormat_Code_DXBC1_RGBA_SRGB = 0x0000000000189002ULL,
	TinyImageFormat_Code_DXBC2_UNORM = 0x00000000001A3002ULL,
	TinyImageFormat_Code_DXBC2_SRGB = 0x00000000001AB002ULL,
	TinyImageFormat_Code_DXBC3_UNORM = 0x00000000001A2002ULL,
	TinyImageFormat_Code_DXBC3_SRGB = 0x00000000001AA002ULL,
	TinyImageFormat_Code_DXBC4_UNORM = 0x0000000000000002ULL,
	TinyImageFormat_Code_DXBC4_SNORM = 0x0000000000004002ULL,
	TinyImageFormat_Code_DXBC5_UNORM = 0x00000000000A0002ULL,
	TinyImageFormat_Code_DXBC5_SNORM = 0x00000000000A4002ULL,
	TinyImageFormat_Code_DXBC6H_UFLOAT = 0x0000000000530002ULL,
	TinyImageFormat_Code_DXBC6H_SFLOAT = 0x000000000052C002ULL,
	TinyImageFormat_Code_DXBC7_UNORM = 0x00000000003A3002ULL,
	TinyImageFormat_Code_DXBC7_SRGB = 0x00000000003AB002ULL,
	TinyImageFormat_Code_PVRTC1_2BPP_UNORM = 0x0000000000000003ULL,
	TinyImageFormat_Code_PVRTC1_4BPP_UNORM = 0x0000000000004003ULL,
	TinyImageFormat_Code_PVRTC2_2BPP_UNORM = 0x0000000000001003ULL,
	TinyImageFormat_Code_PVRTC2_4BPP_UNORM = 0x0000000000005003ULL,
	TinyImageFormat_Code_PVRTC1_2BPP_SRGB = 0x0000000000010003ULL,
	TinyImageFormat_Code_PVRTC1_4BPP_SRGB = 0x0000000000014003ULL,
	TinyImageFormat_Code_PVRTC2_2BPP_SRGB = 0x0000000000011003ULL,
	TinyImageFormat_Code_PVRTC2_4BPP_SRGB = 0x0000000000015003ULL,
	TinyImageFormat_Code_ETC2_R8G8B8_UNORM = 0x0000000000080004ULL,
	TinyImageFormat_Code_ETC2_R8G8B8_SRGB = 0x00000000000A0004ULL,
	TinyImageFormat_Code_ETC2_R8G8B8A1_UNORM = 0x00000000000C4004ULL,
	TinyImageFormat_Code_ETC2_R8G8B8A1_SRGB = 0x00000000000E4004ULL,
	TinyImageFormat_Code_ETC2_R8G8B8A8_UNORM = 0x00000000000C8004ULL,
	TinyImageFormat_Code_ETC2_R8G8B8A8_SRGB = 0x00000000000E8004ULL,
	TinyImageFormat_Code_ETC2_EAC_R11_UNORM = 0x0000000000001004ULL,
	TinyImageFormat_Code_ETC2_EAC_R11_SNORM = 0x0000000000011004ULL,
	TinyImageFormat_Code_ETC2_EAC_R11G11_UNORM = 0x0000000000041004ULL,
	TinyImageFormat_Code_ETC2_EAC_R11G11_SNORM = 0x0000000000051004ULL,
	TinyImageFormat_Code_ASTC_4x4_UNORM = 0x0000000000012005ULL,
	TinyImageFormat_Code_ASTC_4x4_SRGB = 0x0000000000212005ULL,
	TinyImageFormat_Code_ASTC_5x4_UNORM = 0x0000000000013005ULL,
	TinyImageFormat_Code_ASTC_5x4_SRGB = 0x0000000000213005ULL,
	TinyImageFormat_Code_ASTC_5x5_UNORM = 0x000000000001B005ULL,
	TinyImageFormat_Code_ASTC_5x5_SRGB = 0x000000000021B005ULL,
	TinyImageFormat_Code_ASTC_6x5_UNORM = 0x000000000001C005ULL,
	TinyImageFormat_Code_ASTC_6x5_SRGB = 0x000000000021C005ULL,
	TinyImageFormat_Code_ASTC_6x6_UNORM = 0x0000000000024005ULL,
	TinyImageFormat_Code_ASTC_6x6_SRGB = 0x0000000000224005ULL,
	TinyImageFormat_Code_ASTC_8x5_UNORM = 0x000000000001D005ULL,
	TinyImageFormat_Code_ASTC_8x5_SRGB = 0x000000000021D005ULL,
	TinyImageFormat_Code_ASTC_8x6_UNORM = 0x0000000000025005ULL,
	TinyImageFormat_Code_ASTC_8x6_SRGB = 0x0000000000225005ULL,
	TinyImageFormat_Code_ASTC_8x8_UNORM = 0x000000000002D005ULL,
	TinyImageFormat_Code_ASTC_8x8_SRGB = 0x000000000022D005ULL,
	TinyImageFormat_Code_ASTC_10x5_UNORM = 0x000000000001E005ULL,
	TinyImageFormat_Code_ASTC_10x5_SRGB = 0x000000000021E005ULL,
	TinyImageFormat_Code_ASTC_10x6_UNORM = 0x0000000000026005ULL,
	TinyImageFormat_Code_ASTC_10x6_SRGB = 0x0000000000226005ULL,
	TinyImageFormat_Code_ASTC_10x8_UNORM = 0x000000000002E005ULL,
	TinyImageFormat_Code_ASTC_10x8_SRGB = 0x000000000022E005ULL,
	TinyImageFormat_Code_ASTC_10x10_UNORM = 0x0000000000036005ULL,
	TinyImageFormat_Code_ASTC_10x10_SRGB = 0x0000000000236005ULL,
	TinyImageFormat_Code_ASTC_12x10_UNORM = 0x0000000000037005ULL,
	TinyImageFormat_Code_ASTC_12x10_SRGB = 0x0000000000237005ULL,
	TinyImageFormat_Code_ASTC_12x12_UNORM = 0x000000000003F005ULL,
	TinyImageFormat_Code_ASTC_12x12_SRGB = 0x000000000023F005ULL,
	TinyImageFormat_Code_CLUT_P4 = 0x000000000010D006ULL,
	TinyImageFormat_Code_CLUT_P4A4 = 0x0000000000D6C006ULL,
	TinyImageFormat_Code_CLUT_P8 = 0x0000000000110006ULL,
	TinyImageFormat_Code_CLUT_P8A8 = 0x0000000000D90006ULL,
} TinyImageFormat_Code;

typedef enum TinyImageFormat_LogicalChannel {
	TinyImageFormat_LC_Red = 0,
	TinyImageFormat_LC_Green = 1,
	TinyImageFormat_LC_Blue = 2,
	TinyImageFormat_LC_Alpha = 3,
	TinyImageFormat_LC_Depth = 0,
	TinyImageFormat_LC_Stencil = 1,
	TinyImageFormat_LC_0 = -1,
	TinyImageFormat_LC_1 = -2,
} TinyImageFormat_LogicalChannel;

typedef enum TinyImageFormat_PhysicalChannel {
	TinyImageFormat_PC_0 = 0,
	TinyImageFormat_PC_1 = 1,
	TinyImageFormat_PC_2 = 2,
	TinyImageFormat_PC_3 = 3,
	TinyImageFormat_PC_CONST_0 = -1,
	TinyImageFormat_PC_CONST_1 = -2,
} TinyImageFormat_PhysicalChannel;

#define TinyImageFormat_Count 193U 

typedef struct TinyImageFormat_FetchInput {
	union { void const* pixel; void const* pixelPlane0; };
	union { void const* lut; void const* pixelPlane1; };
	void const* pixelPlane2;
	void const* pixelPlane3;
	void const* pixelPlane4;
	void const* pixelPlane5;
	void const* pixelPlane6;
	void const* pixelPlane7;
	void const* pixelPlane8;
	void const* pixelPlane9;
} TinyImageFormat_FetchInput;

