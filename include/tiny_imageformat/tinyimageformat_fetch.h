//Auto generated by formatgen on Aug  8 2019
#pragma once

#include "tinyimageformat_base.h"

#if __cplusplus
#define TIF_CONSTEXPR constexpr
#else
#define TIF_CONSTEXPR
#endif
#ifndef  TinyImageFormat_HAVE_UINTXX_T
#include <stdint.h> 	// for uint32_t and int64_t
#endif
#ifndef  TinyImageFormat_HAVE_BOOL
#include <stdbool.h>	// for bool
#endif
#ifndef  TinyImageFormat_ASSERT
#include <assert.h>
#define  TinyImageFormat_ASSERT assert
#endif

#define TinyImageFormat_MaxPixelCountOfBlock 144U 



inline double TinyImageFormat_UFloat10ToDouble(uint16_t v) {
	// https://github.com/microsoft/DirectXMath/blob/ecfb4754400dac581c2eeb6e849617cf5d210426/Inc/DirectXPackedVector.h
	union {
		struct {
			uint16_t x : 6; // not used
			uint16_t e : 5;
			uint16_t m : 5;
		};
		uint16_t v;
	} ei;

	union {
			uint32_t u;
			float f;
	} t;

	ei.v = v;

	double out = 0.0;
	if (ei.e == 31) {
		if (ei.m == 0) {
			t.u = 0xFF100000; // + infinity
		} else {
			t.u = 0xFF100002; // float qNAN with payload = 1
		}
	} else if (ei.e == 0) {
		if(ei.m == 0) {
			t.f = 0.0f;
		} else {
			// Normalized float
			uint32_t exp = 1;
			uint32_t man = ei.m;
			do
			{
				exp--;
				man <<= 1;
			} while ((man & 0x20) == 0);
			man &= 0x1F;
			t.u = ((exp + 112) << 23) | (man << 18);
		}
	} else {
		t.u = ((ei.e + 112) << 23) | (ei.m << 18);
	}
	return (double)t.f;
}

inline double TinyImageFormat_UFloat11ToDouble(uint16_t v) {
	// https://github.com/microsoft/DirectXMath/blob/ecfb4754400dac581c2eeb6e849617cf5d210426/Inc/DirectXPackedVector.h
	union {
		struct {
			uint16_t x : 5; // not used
			uint16_t e : 5;
			uint16_t m : 6;
		};
		uint16_t v;
	} ei;

	union {
			uint32_t u;
			float f;
	} t;

	ei.v = v;

	if (ei.e == 31) {
		if (ei.m == 0) {
			t.u = 0xFF100000; // + infinity
		} else {
			t.u = 0xFF100002; // float qNAN with payload = 1
		}
	} else if (ei.e == 0) {
		if(ei.m == 0) {
			t.f = 0.0f;
		} else {
			// Normalized float
			uint32_t exp = 1;
			uint32_t man = ei.m;
			do
			{
				exp--;
				man <<= 1;
			} while ((man & 0x40) == 0);
			man &= 0x3F;
			t.u = ((exp + 112) << 23) | (man << 17);
		}
	} else {
		t.u = ((ei.e + 112) << 23) | (ei.m << 17);
	}
	return (double)t.f;
}

inline void TinyImageFormat_SharedE5B9G9R9UFloatToDoubles(uint32_t v, double out[4]) {
	// https://github.com/microsoft/DirectXMath/blob/ecfb4754400dac581c2eeb6e849617cf5d210426/Inc/DirectXPackedVector.h
	union
	{
		struct
		{
			uint32_t rm : 9;
			uint32_t gm : 9;
			uint32_t bm : 9;
			uint32_t e  : 5;
		};
		uint32_t v;
	} ei;

	union {
		uint32_t u;
		float f;
	} t;

	ei.v = v;
	t.u = 0x33800000 + (ei.e << 23);

	out[0] = (double)(t.f * (float)(ei.rm));
	out[1] = (double)(t.f * (float)(ei.gm));
	out[2] = (double)(t.f * (float)(ei.bm));
	out[3] = 1.0;
}

//HalfToFloat from Rygorous public domain code
inline double TinyImageFormat_HalfAsUintToDouble(uint16_t h_) {

	const uint32_t shifted_exp = 0x7c00 << 13; // exponent mask after shift
	union {
		uint16_t u;
		struct {
			uint32_t Mantissa : 10;
			uint32_t Exponent : 5;
			uint32_t Sign : 1;
		};
	} h;

	union {
		uint32_t u;
		float f;
		struct {
			uint32_t Mantissa : 23;
			uint32_t Exponent : 8;
			uint32_t Sign : 1;
		};
	} o;

	h.u = h_;

	o.u = (h.u & 0x7fff) << 13;     // exponent/mantissa bits
	uint32_t exp = shifted_exp & o.u;   // just the exponent
	o.u += (127 - 15) << 23;        // exponent adjust

	// handle exponent special cases
	if (exp == shifted_exp) { // Inf/NaN?
		o.u += (128 - 16) << 23;    // extra exp adjust
	} else if (exp == 0) // Zero/Denormal?
	{
		union {
			uint32_t u;
			float f;
		} magic;
		magic.u = 113 << 23;

		o.u += 1 << 23;             // extra exp adjust
		o.f -= magic.f;      // renormalize
	}

	o.u |= (h.u & 0x8000) << 16;    // sign bit
	return (double) o.f;
}

inline double TinyImageFormat_BFloatAsUintToDouble(uint16_t h_) {
	union {
		struct {
			uint16_t u;
			uint16_t x;
		};
		float f;
	} o;

	o.u = h_;
	o.x = 0;

	return (double) o.f;
}

TIF_CONSTEXPR float TinyImageFormat_LookupSRGB(uint8_t lookup) {
	switch(lookup) {
		case 0: return 0.00000000;
		case 1: return 0.00030353;
		case 2: return 0.00060705;
		case 3: return 0.00091058;
		case 4: return 0.00121411;
		case 5: return 0.00151763;
		case 6: return 0.00182116;
		case 7: return 0.00212469;
		case 8: return 0.00242822;
		case 9: return 0.00273174;
		case 10: return 0.00303527;
		case 11: return 0.00334654;
		case 12: return 0.00367651;
		case 13: return 0.00402472;
		case 14: return 0.00439144;
		case 15: return 0.00477695;
		case 16: return 0.00518152;
		case 17: return 0.00560539;
		case 18: return 0.00604883;
		case 19: return 0.00651209;
		case 20: return 0.00699541;
		case 21: return 0.00749903;
		case 22: return 0.00802319;
		case 23: return 0.00856812;
		case 24: return 0.00913406;
		case 25: return 0.00972122;
		case 26: return 0.01032982;
		case 27: return 0.01096009;
		case 28: return 0.01161224;
		case 29: return 0.01228649;
		case 30: return 0.01298303;
		case 31: return 0.01370208;
		case 32: return 0.01444384;
		case 33: return 0.01520851;
		case 34: return 0.01599629;
		case 35: return 0.01680738;
		case 36: return 0.01764195;
		case 37: return 0.01850022;
		case 38: return 0.01938236;
		case 39: return 0.02028856;
		case 40: return 0.02121901;
		case 41: return 0.02217388;
		case 42: return 0.02315336;
		case 43: return 0.02415763;
		case 44: return 0.02518686;
		case 45: return 0.02624122;
		case 46: return 0.02732089;
		case 47: return 0.02842604;
		case 48: return 0.02955683;
		case 49: return 0.03071344;
		case 50: return 0.03189603;
		case 51: return 0.03310476;
		case 52: return 0.03433981;
		case 53: return 0.03560131;
		case 54: return 0.03688945;
		case 55: return 0.03820436;
		case 56: return 0.03954624;
		case 57: return 0.04091520;
		case 58: return 0.04231141;
		case 59: return 0.04373503;
		case 60: return 0.04518620;
		case 61: return 0.04666508;
		case 62: return 0.04817182;
		case 63: return 0.04970656;
		case 64: return 0.05126947;
		case 65: return 0.05286065;
		case 66: return 0.05448028;
		case 67: return 0.05612849;
		case 68: return 0.05780543;
		case 69: return 0.05951124;
		case 70: return 0.06124607;
		case 71: return 0.06301003;
		case 72: return 0.06480328;
		case 73: return 0.06662595;
		case 74: return 0.06847818;
		case 75: return 0.07036011;
		case 76: return 0.07227186;
		case 77: return 0.07421358;
		case 78: return 0.07618539;
		case 79: return 0.07818743;
		case 80: return 0.08021983;
		case 81: return 0.08228271;
		case 82: return 0.08437622;
		case 83: return 0.08650047;
		case 84: return 0.08865561;
		case 85: return 0.09084173;
		case 86: return 0.09305898;
		case 87: return 0.09530748;
		case 88: return 0.09758736;
		case 89: return 0.09989874;
		case 90: return 0.10224175;
		case 91: return 0.10461649;
		case 92: return 0.10702311;
		case 93: return 0.10946172;
		case 94: return 0.11193243;
		case 95: return 0.11443538;
		case 96: return 0.11697067;
		case 97: return 0.11953843;
		case 98: return 0.12213880;
		case 99: return 0.12477184;
		case 100: return 0.12743770;
		case 101: return 0.13013649;
		case 102: return 0.13286833;
		case 103: return 0.13563335;
		case 104: return 0.13843162;
		case 105: return 0.14126331;
		case 106: return 0.14412849;
		case 107: return 0.14702728;
		case 108: return 0.14995980;
		case 109: return 0.15292616;
		case 110: return 0.15592647;
		case 111: return 0.15896086;
		case 112: return 0.16202940;
		case 113: return 0.16513222;
		case 114: return 0.16826940;
		case 115: return 0.17144109;
		case 116: return 0.17464739;
		case 117: return 0.17788841;
		case 118: return 0.18116423;
		case 119: return 0.18447499;
		case 120: return 0.18782076;
		case 121: return 0.19120167;
		case 122: return 0.19461781;
		case 123: return 0.19806930;
		case 124: return 0.20155624;
		case 125: return 0.20507871;
		case 126: return 0.20863685;
		case 127: return 0.21223073;
		case 128: return 0.21586053;
		case 129: return 0.21952623;
		case 130: return 0.22322798;
		case 131: return 0.22696589;
		case 132: return 0.23074007;
		case 133: return 0.23455065;
		case 134: return 0.23839766;
		case 135: return 0.24228120;
		case 136: return 0.24620140;
		case 137: return 0.25015837;
		case 138: return 0.25415218;
		case 139: return 0.25818291;
		case 140: return 0.26225072;
		case 141: return 0.26635566;
		case 142: return 0.27049786;
		case 143: return 0.27467737;
		case 144: return 0.27889434;
		case 145: return 0.28314880;
		case 146: return 0.28744090;
		case 147: return 0.29177070;
		case 148: return 0.29613832;
		case 149: return 0.30054384;
		case 150: return 0.30498737;
		case 151: return 0.30946895;
		case 152: return 0.31398875;
		case 153: return 0.31854683;
		case 154: return 0.32314324;
		case 155: return 0.32777813;
		case 156: return 0.33245158;
		case 157: return 0.33716366;
		case 158: return 0.34191445;
		case 159: return 0.34670410;
		case 160: return 0.35153270;
		case 161: return 0.35640025;
		case 162: return 0.36130688;
		case 163: return 0.36625269;
		case 164: return 0.37123778;
		case 165: return 0.37626222;
		case 166: return 0.38132611;
		case 167: return 0.38642952;
		case 168: return 0.39157256;
		case 169: return 0.39675531;
		case 170: return 0.40197787;
		case 171: return 0.40724030;
		case 172: return 0.41254270;
		case 173: return 0.41788515;
		case 174: return 0.42326775;
		case 175: return 0.42869055;
		case 176: return 0.43415371;
		case 177: return 0.43965724;
		case 178: return 0.44520125;
		case 179: return 0.45078585;
		case 180: return 0.45641106;
		case 181: return 0.46207705;
		case 182: return 0.46778384;
		case 183: return 0.47353154;
		case 184: return 0.47932023;
		case 185: return 0.48514998;
		case 186: return 0.49102089;
		case 187: return 0.49693304;
		case 188: return 0.50288659;
		case 189: return 0.50888145;
		case 190: return 0.51491779;
		case 191: return 0.52099568;
		case 192: return 0.52711523;
		case 193: return 0.53327650;
		case 194: return 0.53947961;
		case 195: return 0.54572457;
		case 196: return 0.55201149;
		case 197: return 0.55834049;
		case 198: return 0.56471163;
		case 199: return 0.57112491;
		case 200: return 0.57758051;
		case 201: return 0.58407849;
		case 202: return 0.59061891;
		case 203: return 0.59720188;
		case 204: return 0.60382742;
		case 205: return 0.61049563;
		case 206: return 0.61720663;
		case 207: return 0.62396044;
		case 208: return 0.63075721;
		case 209: return 0.63759696;
		case 210: return 0.64447975;
		case 211: return 0.65140569;
		case 212: return 0.65837485;
		case 213: return 0.66538733;
		case 214: return 0.67244321;
		case 215: return 0.67954254;
		case 216: return 0.68668544;
		case 217: return 0.69387192;
		case 218: return 0.70110202;
		case 219: return 0.70837593;
		case 220: return 0.71569365;
		case 221: return 0.72305524;
		case 222: return 0.73046088;
		case 223: return 0.73791057;
		case 224: return 0.74540436;
		case 225: return 0.75294232;
		case 226: return 0.76052463;
		case 227: return 0.76815128;
		case 228: return 0.77582234;
		case 229: return 0.78353792;
		case 230: return 0.79129803;
		case 231: return 0.79910284;
		case 232: return 0.80695236;
		case 233: return 0.81484669;
		case 234: return 0.82278585;
		case 235: return 0.83076996;
		case 236: return 0.83879912;
		case 237: return 0.84687328;
		case 238: return 0.85499269;
		case 239: return 0.86315727;
		case 240: return 0.87136722;
		case 241: return 0.87962234;
		case 242: return 0.88792318;
		case 243: return 0.89626938;
		case 244: return 0.90466136;
		case 245: return 0.91309869;
		case 246: return 0.92158204;
		case 247: return 0.93011087;
		case 248: return 0.93868589;
		case 249: return 0.94730657;
		case 250: return 0.95597351;
		case 251: return 0.96468627;
		case 252: return 0.97344548;
		case 253: return 0.98225057;
		case 254: return 0.99110222;
		case 255: return 1.00000000;
		default: return 1.0;
	}
}

TIF_CONSTEXPR inline bool TinyImageFormat_CanFetchLogicalPixels(TinyImageFormat const fmt) {
	switch(fmt) {
		case TinyImageFormat_R1_UNORM: return true;
		case TinyImageFormat_R2_UNORM: return true;
		case TinyImageFormat_R4_UNORM: return true;
		case TinyImageFormat_R4G4_UNORM: return true;
		case TinyImageFormat_G4R4_UNORM: return true;
		case TinyImageFormat_A8_UNORM: return true;
		case TinyImageFormat_R8_UNORM: return true;
		case TinyImageFormat_R8_SNORM: return true;
		case TinyImageFormat_R8_UINT: return true;
		case TinyImageFormat_R8_SINT: return true;
		case TinyImageFormat_R8_SRGB: return true;
		case TinyImageFormat_B2G3R3_UNORM: return true;
		case TinyImageFormat_R4G4B4A4_UNORM: return true;
		case TinyImageFormat_R4G4B4X4_UNORM: return true;
		case TinyImageFormat_B4G4R4A4_UNORM: return true;
		case TinyImageFormat_B4G4R4X4_UNORM: return true;
		case TinyImageFormat_A4R4G4B4_UNORM: return true;
		case TinyImageFormat_X4R4G4B4_UNORM: return true;
		case TinyImageFormat_A4B4G4R4_UNORM: return true;
		case TinyImageFormat_X4B4G4R4_UNORM: return true;
		case TinyImageFormat_R5G6B5_UNORM: return true;
		case TinyImageFormat_B5G6R5_UNORM: return true;
		case TinyImageFormat_R5G5B5A1_UNORM: return true;
		case TinyImageFormat_B5G5R5A1_UNORM: return true;
		case TinyImageFormat_A1B5G5R5_UNORM: return true;
		case TinyImageFormat_A1R5G5B5_UNORM: return true;
		case TinyImageFormat_R5G5B5X1_UNORM: return true;
		case TinyImageFormat_B5G5R5X1_UNORM: return true;
		case TinyImageFormat_X1R5G5B5_UNORM: return true;
		case TinyImageFormat_X1B5G5R5_UNORM: return true;
		case TinyImageFormat_B2G3R3A8_UNORM: return true;
		case TinyImageFormat_R8G8_UNORM: return true;
		case TinyImageFormat_R8G8_SNORM: return true;
		case TinyImageFormat_G8R8_UNORM: return true;
		case TinyImageFormat_G8R8_SNORM: return true;
		case TinyImageFormat_R8G8_UINT: return true;
		case TinyImageFormat_R8G8_SINT: return true;
		case TinyImageFormat_R8G8_SRGB: return true;
		case TinyImageFormat_R16_UNORM: return true;
		case TinyImageFormat_R16_SNORM: return true;
		case TinyImageFormat_R16_UINT: return true;
		case TinyImageFormat_R16_SINT: return true;
		case TinyImageFormat_R16_SFLOAT: return true;
		case TinyImageFormat_R16_SBFLOAT: return true;
		case TinyImageFormat_R8G8B8_UNORM: return true;
		case TinyImageFormat_R8G8B8_SNORM: return true;
		case TinyImageFormat_R8G8B8_UINT: return true;
		case TinyImageFormat_R8G8B8_SINT: return true;
		case TinyImageFormat_R8G8B8_SRGB: return true;
		case TinyImageFormat_B8G8R8_UNORM: return true;
		case TinyImageFormat_B8G8R8_SNORM: return true;
		case TinyImageFormat_B8G8R8_UINT: return true;
		case TinyImageFormat_B8G8R8_SINT: return true;
		case TinyImageFormat_B8G8R8_SRGB: return true;
		case TinyImageFormat_R8G8B8A8_UNORM: return true;
		case TinyImageFormat_R8G8B8A8_SNORM: return true;
		case TinyImageFormat_R8G8B8A8_UINT: return true;
		case TinyImageFormat_R8G8B8A8_SINT: return true;
		case TinyImageFormat_R8G8B8A8_SRGB: return true;
		case TinyImageFormat_B8G8R8A8_UNORM: return true;
		case TinyImageFormat_B8G8R8A8_SNORM: return true;
		case TinyImageFormat_B8G8R8A8_UINT: return true;
		case TinyImageFormat_B8G8R8A8_SINT: return true;
		case TinyImageFormat_B8G8R8A8_SRGB: return true;
		case TinyImageFormat_R8G8B8X8_UNORM: return true;
		case TinyImageFormat_B8G8R8X8_UNORM: return true;
		case TinyImageFormat_R16G16_UNORM: return true;
		case TinyImageFormat_G16R16_UNORM: return true;
		case TinyImageFormat_R16G16_SNORM: return true;
		case TinyImageFormat_G16R16_SNORM: return true;
		case TinyImageFormat_R16G16_UINT: return true;
		case TinyImageFormat_R16G16_SINT: return true;
		case TinyImageFormat_R16G16_SFLOAT: return true;
		case TinyImageFormat_R16G16_SBFLOAT: return true;
		case TinyImageFormat_R32_UINT: return true;
		case TinyImageFormat_R32_SINT: return true;
		case TinyImageFormat_R32_SFLOAT: return true;
		case TinyImageFormat_A2R10G10B10_UNORM: return true;
		case TinyImageFormat_A2R10G10B10_UINT: return true;
		case TinyImageFormat_A2B10G10R10_UNORM: return true;
		case TinyImageFormat_A2B10G10R10_UINT: return true;
		case TinyImageFormat_R10G10B10A2_UNORM: return true;
		case TinyImageFormat_B10G10R10A2_UNORM: return true;
		case TinyImageFormat_B10G10R10A2_UINT: return true;
		case TinyImageFormat_B10G11R11_UFLOAT: return true;
		case TinyImageFormat_E5B9G9R9_UFLOAT: return true;
		case TinyImageFormat_R16G16B16_UNORM: return true;
		case TinyImageFormat_R16G16B16_SNORM: return true;
		case TinyImageFormat_R16G16B16_UINT: return true;
		case TinyImageFormat_R16G16B16_SINT: return true;
		case TinyImageFormat_R16G16B16_SFLOAT: return true;
		case TinyImageFormat_R16G16B16_SBFLOAT: return true;
		case TinyImageFormat_R16G16B16A16_UNORM: return true;
		case TinyImageFormat_R16G16B16A16_SNORM: return true;
		case TinyImageFormat_R16G16B16A16_UINT: return true;
		case TinyImageFormat_R16G16B16A16_SINT: return true;
		case TinyImageFormat_R16G16B16A16_SFLOAT: return true;
		case TinyImageFormat_R16G16B16A16_SBFLOAT: return true;
		case TinyImageFormat_R32G32_UINT: return true;
		case TinyImageFormat_R32G32_SINT: return true;
		case TinyImageFormat_R32G32_SFLOAT: return true;
		case TinyImageFormat_R32G32B32_UINT: return true;
		case TinyImageFormat_R32G32B32_SINT: return true;
		case TinyImageFormat_R32G32B32_SFLOAT: return true;
		case TinyImageFormat_R32G32B32A32_UINT: return true;
		case TinyImageFormat_R32G32B32A32_SINT: return true;
		case TinyImageFormat_R32G32B32A32_SFLOAT: return true;
		case TinyImageFormat_R64_UINT: return true;
		case TinyImageFormat_R64_SINT: return true;
		case TinyImageFormat_R64_SFLOAT: return true;
		case TinyImageFormat_R64G64_UINT: return true;
		case TinyImageFormat_R64G64_SINT: return true;
		case TinyImageFormat_R64G64_SFLOAT: return true;
		case TinyImageFormat_R64G64B64_UINT: return true;
		case TinyImageFormat_R64G64B64_SINT: return true;
		case TinyImageFormat_R64G64B64_SFLOAT: return true;
		case TinyImageFormat_R64G64B64A64_UINT: return true;
		case TinyImageFormat_R64G64B64A64_SINT: return true;
		case TinyImageFormat_R64G64B64A64_SFLOAT: return true;
		default: return false;
		}
	}

TIF_CONSTEXPR inline bool TinyImageFormat_FetchLogicalPixels(TinyImageFormat const fmt, TinyImageFormat_FetchInput const* in, double* out) {
	switch(fmt) {
		case TinyImageFormat_R1_UNORM: {
			uint8_t val = ((uint8_t const*)in->pixel)[0];
			out[0] = (double)((val >> 0) & 0x1);
			out[1] = 0;
			out[2] = 0;
			out[3] = 1;
			out[4] = (double)((val >> 1) & 0x1);
			out[5] = 0;
			out[6] = 0;
			out[7] = 1;
			out[8] = (double)((val >> 2) & 0x1);
			out[9] = 0;
			out[10] = 0;
			out[11] = 1;
			out[12] = (double)((val >> 3) & 0x1);
			out[13] = 0;
			out[14] = 0;
			out[15] = 1;
			out[16] = (double)((val >> 4) & 0x1);
			out[17] = 0;
			out[18] = 0;
			out[19] = 1;
			out[20] = (double)((val >> 5) & 0x1);
			out[21] = 0;
			out[22] = 0;
			out[23] = 1;
			out[24] = (double)((val >> 6) & 0x1);
			out[25] = 0;
			out[26] = 0;
			out[27] = 1;
			out[28] = (double)((val >> 7) & 0x1);
			out[29] = 0;
			out[30] = 0;
			out[31] = 1;
			return true;}
		case TinyImageFormat_R2_UNORM: {
			uint8_t val = ((uint8_t const*)in->pixel)[0];
			out[0] = ((double)((val >> 0) & 0x3)) * 0.33333333;
			out[1] = 0;
			out[2] = 0;
			out[3] = 1;
			out[4] = ((double)((val >> 2) & 0x3)) * 0.33333333;
			out[5] = 0;
			out[6] = 0;
			out[7] = 1;
			out[8] = ((double)((val >> 4) & 0x3)) * 0.33333333;
			out[9] = 0;
			out[10] = 0;
			out[11] = 1;
			out[12] = ((double)((val >> 6) & 0x3)) * 0.33333333;
			out[13] = 0;
			out[14] = 0;
			out[15] = 1;
			return true;}
		case TinyImageFormat_R4_UNORM: {
			uint8_t val = ((uint8_t const*)in->pixel)[0];
			out[0] = ((double)((val >> 0) & 0xf)) * 0.06666667;
			out[1] = 0;
			out[2] = 0;
			out[3] = 1;
			out[4] = ((double)((val >> 4) & 0xf)) * 0.06666667;
			out[5] = 0;
			out[6] = 0;
			out[7] = 1;
			return true;}
		case TinyImageFormat_R4G4_UNORM: {
			uint8_t val = ((uint8_t const*)in->pixel)[0];
			out[0] = ((double)((val >> 0) & 0xf)) * 0.06666667;
			out[1] = ((double)((val >> 4) & 0xf)) * 0.06666667;
			out[2] = 0;
			out[3] = 1;
			return true;}
		case TinyImageFormat_G4R4_UNORM: {
			uint8_t val = ((uint8_t const*)in->pixel)[0];
			out[1] = ((double)((val >> 0) & 0xf)) * 0.06666667;
			out[0] = ((double)((val >> 4) & 0xf)) * 0.06666667;
			out[2] = 0;
			out[3] = 1;
			return true;}
		case TinyImageFormat_A8_UNORM: {
			out[3] = ((double)((uint8_t const *)in->pixel)[0]) * 0.00392157;
			out[0] = 0;
			out[1] = 0;
			out[2] = 0;
			return true;}
		case TinyImageFormat_R8_UNORM: {
			out[0] = ((double)((uint8_t const *)in->pixel)[0]) * 0.00392157;
			out[1] = 0;
			out[2] = 0;
			out[3] = 1;
			return true;}
		case TinyImageFormat_R8_SNORM: {
			out[0] = (((double)((int8_t const *)in->pixel)[0]) * 0.00787402) - 1.0;
			out[1] = 0;
			out[2] = 0;
			out[3] = 1;
			return true;}
		case TinyImageFormat_R8_UINT: {
			out[0] = (double)(((uint8_t const *)in->pixel))[0];
			out[1] = 0;
			out[2] = 0;
			out[3] = 1;
			return true;}
		case TinyImageFormat_R8_SINT: {
			out[0] = ((double)(((int8_t const *)in->pixel))[0]) - 127.00000000;
			out[1] = 0;
			out[2] = 0;
			out[3] = 1;
			return true;}
		case TinyImageFormat_R8_SRGB: {
			out[0] = (double)TinyImageFormat_LookupSRGB(((uint8_t const *)in->pixel)[0]);
			out[1] = 0;
			out[2] = 0;
			out[3] = 1;
			return true;}
		case TinyImageFormat_B2G3R3_UNORM: {
			uint8_t val = ((uint8_t const*)in->pixel)[0];
			out[2] = ((double)((val >> 0) & 0x3)) * 0.33333333;
			out[1] = ((double)((val >> 2) & 0x7)) * 0.14285714;
			out[0] = ((double)((val >> 5) & 0x7)) * 0.14285714;
			out[3] = 1;
			return true;}
		case TinyImageFormat_R4G4B4A4_UNORM: {
			uint16_t val = ((uint16_t const*)in->pixel)[0];
			out[0] = ((double)((val >> 0) & 0xf)) * 0.06666667;
			out[1] = ((double)((val >> 4) & 0xf)) * 0.06666667;
			out[2] = ((double)((val >> 8) & 0xf)) * 0.06666667;
			out[3] = ((double)((val >> 12) & 0xf)) * 0.06666667;
			return true;}
		case TinyImageFormat_R4G4B4X4_UNORM: {
			uint16_t val = ((uint16_t const*)in->pixel)[0];
			out[0] = ((double)((val >> 0) & 0xf)) * 0.06666667;
			out[1] = ((double)((val >> 4) & 0xf)) * 0.06666667;
			out[2] = ((double)((val >> 8) & 0xf)) * 0.06666667;
			out[3] = 1;
			return true;}
		case TinyImageFormat_B4G4R4A4_UNORM: {
			uint16_t val = ((uint16_t const*)in->pixel)[0];
			out[2] = ((double)((val >> 0) & 0xf)) * 0.06666667;
			out[1] = ((double)((val >> 4) & 0xf)) * 0.06666667;
			out[0] = ((double)((val >> 8) & 0xf)) * 0.06666667;
			out[3] = ((double)((val >> 12) & 0xf)) * 0.06666667;
			return true;}
		case TinyImageFormat_B4G4R4X4_UNORM: {
			uint16_t val = ((uint16_t const*)in->pixel)[0];
			out[2] = ((double)((val >> 0) & 0xf)) * 0.06666667;
			out[1] = ((double)((val >> 4) & 0xf)) * 0.06666667;
			out[0] = ((double)((val >> 8) & 0xf)) * 0.06666667;
			out[3] = 1;
			return true;}
		case TinyImageFormat_A4R4G4B4_UNORM: {
			uint16_t val = ((uint16_t const*)in->pixel)[0];
			out[3] = ((double)((val >> 0) & 0xf)) * 0.06666667;
			out[0] = ((double)((val >> 4) & 0xf)) * 0.06666667;
			out[1] = ((double)((val >> 8) & 0xf)) * 0.06666667;
			out[2] = ((double)((val >> 12) & 0xf)) * 0.06666667;
			return true;}
		case TinyImageFormat_X4R4G4B4_UNORM: {
			uint16_t val = ((uint16_t const*)in->pixel)[0];
			out[0] = ((double)((val >> 4) & 0xf)) * 0.06666667;
			out[1] = ((double)((val >> 8) & 0xf)) * 0.06666667;
			out[2] = ((double)((val >> 12) & 0xf)) * 0.06666667;
			out[3] = 1;
			return true;}
		case TinyImageFormat_A4B4G4R4_UNORM: {
			uint16_t val = ((uint16_t const*)in->pixel)[0];
			out[3] = ((double)((val >> 0) & 0xf)) * 0.06666667;
			out[2] = ((double)((val >> 4) & 0xf)) * 0.06666667;
			out[1] = ((double)((val >> 8) & 0xf)) * 0.06666667;
			out[0] = ((double)((val >> 12) & 0xf)) * 0.06666667;
			return true;}
		case TinyImageFormat_X4B4G4R4_UNORM: {
			uint16_t val = ((uint16_t const*)in->pixel)[0];
			out[2] = ((double)((val >> 4) & 0xf)) * 0.06666667;
			out[1] = ((double)((val >> 8) & 0xf)) * 0.06666667;
			out[0] = ((double)((val >> 12) & 0xf)) * 0.06666667;
			out[3] = 1;
			return true;}
		case TinyImageFormat_R5G6B5_UNORM: {
			uint16_t val = ((uint16_t const*)in->pixel)[0];
			out[0] = ((double)((val >> 0) & 0x1f)) * 0.03225806;
			out[1] = ((double)((val >> 5) & 0x3f)) * 0.01587302;
			out[2] = ((double)((val >> 11) & 0x1f)) * 0.03225806;
			out[3] = 1;
			return true;}
		case TinyImageFormat_B5G6R5_UNORM: {
			uint16_t val = ((uint16_t const*)in->pixel)[0];
			out[2] = ((double)((val >> 0) & 0x1f)) * 0.03225806;
			out[1] = ((double)((val >> 5) & 0x3f)) * 0.01587302;
			out[0] = ((double)((val >> 11) & 0x1f)) * 0.03225806;
			out[3] = 1;
			return true;}
		case TinyImageFormat_R5G5B5A1_UNORM: {
			uint16_t val = ((uint16_t const*)in->pixel)[0];
			out[0] = ((double)((val >> 0) & 0x1f)) * 0.03225806;
			out[1] = ((double)((val >> 5) & 0x1f)) * 0.03225806;
			out[2] = ((double)((val >> 10) & 0x1f)) * 0.03225806;
			out[3] = (double)((val >> 15) & 0x1);
			return true;}
		case TinyImageFormat_B5G5R5A1_UNORM: {
			uint16_t val = ((uint16_t const*)in->pixel)[0];
			out[2] = ((double)((val >> 0) & 0x1f)) * 0.03225806;
			out[1] = ((double)((val >> 5) & 0x1f)) * 0.03225806;
			out[0] = ((double)((val >> 10) & 0x1f)) * 0.03225806;
			out[3] = (double)((val >> 15) & 0x1);
			return true;}
		case TinyImageFormat_A1B5G5R5_UNORM: {
			uint16_t val = ((uint16_t const*)in->pixel)[0];
			out[3] = (double)((val >> 0) & 0x1);
			out[2] = ((double)((val >> 1) & 0x1f)) * 0.03225806;
			out[1] = ((double)((val >> 6) & 0x1f)) * 0.03225806;
			out[0] = ((double)((val >> 11) & 0x1f)) * 0.03225806;
			return true;}
		case TinyImageFormat_A1R5G5B5_UNORM: {
			uint16_t val = ((uint16_t const*)in->pixel)[0];
			out[3] = (double)((val >> 0) & 0x1);
			out[0] = ((double)((val >> 1) & 0x1f)) * 0.03225806;
			out[1] = ((double)((val >> 6) & 0x1f)) * 0.03225806;
			out[2] = ((double)((val >> 11) & 0x1f)) * 0.03225806;
			return true;}
		case TinyImageFormat_R5G5B5X1_UNORM: {
			uint16_t val = ((uint16_t const*)in->pixel)[0];
			out[0] = ((double)((val >> 0) & 0x1f)) * 0.03225806;
			out[1] = ((double)((val >> 5) & 0x1f)) * 0.03225806;
			out[2] = ((double)((val >> 10) & 0x1f)) * 0.03225806;
			out[3] = 1;
			return true;}
		case TinyImageFormat_B5G5R5X1_UNORM: {
			uint16_t val = ((uint16_t const*)in->pixel)[0];
			out[2] = ((double)((val >> 0) & 0x1f)) * 0.03225806;
			out[1] = ((double)((val >> 5) & 0x1f)) * 0.03225806;
			out[0] = ((double)((val >> 10) & 0x1f)) * 0.03225806;
			out[3] = 1;
			return true;}
		case TinyImageFormat_X1R5G5B5_UNORM: {
			uint16_t val = ((uint16_t const*)in->pixel)[0];
			out[0] = ((double)((val >> 1) & 0x1f)) * 0.03225806;
			out[1] = ((double)((val >> 6) & 0x1f)) * 0.03225806;
			out[2] = ((double)((val >> 11) & 0x1f)) * 0.03225806;
			out[3] = 1;
			return true;}
		case TinyImageFormat_X1B5G5R5_UNORM: {
			uint16_t val = ((uint16_t const*)in->pixel)[0];
			out[2] = ((double)((val >> 1) & 0x1f)) * 0.03225806;
			out[1] = ((double)((val >> 6) & 0x1f)) * 0.03225806;
			out[0] = ((double)((val >> 11) & 0x1f)) * 0.03225806;
			out[3] = 1;
			return true;}
		case TinyImageFormat_B2G3R3A8_UNORM: {
			uint16_t val = ((uint16_t const*)in->pixel)[0];
			out[2] = ((double)((val >> 0) & 0x3)) * 0.33333333;
			out[1] = ((double)((val >> 2) & 0x7)) * 0.14285714;
			out[0] = ((double)((val >> 5) & 0x7)) * 0.14285714;
			out[3] = ((double)((val >> 8) & 0xff)) * 0.00392157;
			return true;}
		case TinyImageFormat_R8G8_UNORM: {
			out[0] = ((double)((uint8_t const *)in->pixel)[0]) * 0.00392157;
			out[1] = ((double)((uint8_t const *)in->pixel)[1]) * 0.00392157;
			out[2] = 0;
			out[3] = 1;
			return true;}
		case TinyImageFormat_R8G8_SNORM: {
			out[0] = (((double)((int8_t const *)in->pixel)[0]) * 0.00787402) - 1.0;
			out[1] = (((double)((int8_t const *)in->pixel)[1]) * 0.00787402) - 1.0;
			out[2] = 0;
			out[3] = 1;
			return true;}
		case TinyImageFormat_G8R8_UNORM: {
			out[1] = ((double)((uint8_t const *)in->pixel)[0]) * 0.00392157;
			out[0] = ((double)((uint8_t const *)in->pixel)[1]) * 0.00392157;
			out[2] = 0;
			out[3] = 1;
			return true;}
		case TinyImageFormat_G8R8_SNORM: {
			out[1] = (((double)((int8_t const *)in->pixel)[0]) * 0.00787402) - 1.0;
			out[0] = (((double)((int8_t const *)in->pixel)[1]) * 0.00787402) - 1.0;
			out[2] = 0;
			out[3] = 1;
			return true;}
		case TinyImageFormat_R8G8_UINT: {
			out[0] = (double)(((uint8_t const *)in->pixel))[0];
			out[1] = (double)(((uint8_t const *)in->pixel))[1];
			out[2] = 0;
			out[3] = 1;
			return true;}
		case TinyImageFormat_R8G8_SINT: {
			out[0] = ((double)(((int8_t const *)in->pixel))[0]) - 127.00000000;
			out[1] = ((double)(((int8_t const *)in->pixel))[1]) - 127.00000000;
			out[2] = 0;
			out[3] = 1;
			return true;}
		case TinyImageFormat_R8G8_SRGB: {
			out[0] = (double)TinyImageFormat_LookupSRGB(((uint8_t const *)in->pixel)[0]);
			out[1] = (double)TinyImageFormat_LookupSRGB(((uint8_t const *)in->pixel)[1]);
			out[2] = 0;
			out[3] = 1;
			return true;}
		case TinyImageFormat_R16_UNORM: {
			out[0] = ((double)((uint16_t const *)in->pixel)[0]) * 0.00001526;
			out[1] = 0;
			out[2] = 0;
			out[3] = 1;
			return true;}
		case TinyImageFormat_R16_SNORM: {
			out[0] = (((double)((int16_t const *)in->pixel)[0]) * 0.00003052) - 1.0;
			out[1] = 0;
			out[2] = 0;
			out[3] = 1;
			return true;}
		case TinyImageFormat_R16_UINT: {
			out[0] = (double)(((uint16_t const *)in->pixel))[0];
			out[1] = 0;
			out[2] = 0;
			out[3] = 1;
			return true;}
		case TinyImageFormat_R16_SINT: {
			out[0] = ((double)(((int16_t const *)in->pixel))[0]) - 32767.00000000;
			out[1] = 0;
			out[2] = 0;
			out[3] = 1;
			return true;}
		case TinyImageFormat_R16_SFLOAT: {
			out[0] = TinyImageFormat_HalfAsUintToDouble((((uint16_t const *)in->pixel))[0]);
			out[1] = 0;
			out[2] = 0;
			out[3] = 1;
			return true;}
		case TinyImageFormat_R16_SBFLOAT: {
			out[0] = TinyImageFormat_BFloatAsUintToDouble((((uint16_t const *)in->pixel))[0]);
			out[1] = 0;
			out[2] = 0;
			out[3] = 1;
			return true;}
		case TinyImageFormat_R8G8B8_UNORM: {
			out[0] = ((double)((uint8_t const *)in->pixel)[0]) * 0.00392157;
			out[1] = ((double)((uint8_t const *)in->pixel)[1]) * 0.00392157;
			out[2] = ((double)((uint8_t const *)in->pixel)[2]) * 0.00392157;
			out[3] = 1;
			return true;}
		case TinyImageFormat_R8G8B8_SNORM: {
			out[0] = (((double)((int8_t const *)in->pixel)[0]) * 0.00787402) - 1.0;
			out[1] = (((double)((int8_t const *)in->pixel)[1]) * 0.00787402) - 1.0;
			out[2] = (((double)((int8_t const *)in->pixel)[2]) * 0.00787402) - 1.0;
			out[3] = 1;
			return true;}
		case TinyImageFormat_R8G8B8_UINT: {
			out[0] = (double)(((uint8_t const *)in->pixel))[0];
			out[1] = (double)(((uint8_t const *)in->pixel))[1];
			out[2] = (double)(((uint8_t const *)in->pixel))[2];
			out[3] = 1;
			return true;}
		case TinyImageFormat_R8G8B8_SINT: {
			out[0] = ((double)(((int8_t const *)in->pixel))[0]) - 127.00000000;
			out[1] = ((double)(((int8_t const *)in->pixel))[1]) - 127.00000000;
			out[2] = ((double)(((int8_t const *)in->pixel))[2]) - 127.00000000;
			out[3] = 1;
			return true;}
		case TinyImageFormat_R8G8B8_SRGB: {
			out[0] = (double)TinyImageFormat_LookupSRGB(((uint8_t const *)in->pixel)[0]);
			out[1] = (double)TinyImageFormat_LookupSRGB(((uint8_t const *)in->pixel)[1]);
			out[2] = (double)TinyImageFormat_LookupSRGB(((uint8_t const *)in->pixel)[2]);
			out[3] = 1;
			return true;}
		case TinyImageFormat_B8G8R8_UNORM: {
			out[2] = ((double)((uint8_t const *)in->pixel)[0]) * 0.00392157;
			out[1] = ((double)((uint8_t const *)in->pixel)[1]) * 0.00392157;
			out[0] = ((double)((uint8_t const *)in->pixel)[2]) * 0.00392157;
			out[3] = 1;
			return true;}
		case TinyImageFormat_B8G8R8_SNORM: {
			out[2] = (((double)((int8_t const *)in->pixel)[0]) * 0.00787402) - 1.0;
			out[1] = (((double)((int8_t const *)in->pixel)[1]) * 0.00787402) - 1.0;
			out[0] = (((double)((int8_t const *)in->pixel)[2]) * 0.00787402) - 1.0;
			out[3] = 1;
			return true;}
		case TinyImageFormat_B8G8R8_UINT: {
			out[2] = (double)(((uint8_t const *)in->pixel))[0];
			out[1] = (double)(((uint8_t const *)in->pixel))[1];
			out[0] = (double)(((uint8_t const *)in->pixel))[2];
			out[3] = 1;
			return true;}
		case TinyImageFormat_B8G8R8_SINT: {
			out[2] = ((double)(((int8_t const *)in->pixel))[0]) - 127.00000000;
			out[1] = ((double)(((int8_t const *)in->pixel))[1]) - 127.00000000;
			out[0] = ((double)(((int8_t const *)in->pixel))[2]) - 127.00000000;
			out[3] = 1;
			return true;}
		case TinyImageFormat_B8G8R8_SRGB: {
			out[2] = (double)TinyImageFormat_LookupSRGB(((uint8_t const *)in->pixel)[0]);
			out[1] = (double)TinyImageFormat_LookupSRGB(((uint8_t const *)in->pixel)[1]);
			out[0] = (double)TinyImageFormat_LookupSRGB(((uint8_t const *)in->pixel)[2]);
			out[3] = 1;
			return true;}
		case TinyImageFormat_R8G8B8A8_UNORM: {
			out[0] = ((double)((uint8_t const *)in->pixel)[0]) * 0.00392157;
			out[1] = ((double)((uint8_t const *)in->pixel)[1]) * 0.00392157;
			out[2] = ((double)((uint8_t const *)in->pixel)[2]) * 0.00392157;
			out[3] = ((double)((uint8_t const *)in->pixel)[3]) * 0.00392157;
			return true;}
		case TinyImageFormat_R8G8B8A8_SNORM: {
			out[0] = (((double)((int8_t const *)in->pixel)[0]) * 0.00787402) - 1.0;
			out[1] = (((double)((int8_t const *)in->pixel)[1]) * 0.00787402) - 1.0;
			out[2] = (((double)((int8_t const *)in->pixel)[2]) * 0.00787402) - 1.0;
			out[3] = (((double)((int8_t const *)in->pixel)[3]) * 0.00787402) - 1.0;
			return true;}
		case TinyImageFormat_R8G8B8A8_UINT: {
			out[0] = (double)(((uint8_t const *)in->pixel))[0];
			out[1] = (double)(((uint8_t const *)in->pixel))[1];
			out[2] = (double)(((uint8_t const *)in->pixel))[2];
			out[3] = (double)(((uint8_t const *)in->pixel))[3];
			return true;}
		case TinyImageFormat_R8G8B8A8_SINT: {
			out[0] = ((double)(((int8_t const *)in->pixel))[0]) - 127.00000000;
			out[1] = ((double)(((int8_t const *)in->pixel))[1]) - 127.00000000;
			out[2] = ((double)(((int8_t const *)in->pixel))[2]) - 127.00000000;
			out[3] = ((double)(((int8_t const *)in->pixel))[3]) - 127.00000000;
			return true;}
		case TinyImageFormat_R8G8B8A8_SRGB: {
			out[0] = (double)TinyImageFormat_LookupSRGB(((uint8_t const *)in->pixel)[0]);
			out[1] = (double)TinyImageFormat_LookupSRGB(((uint8_t const *)in->pixel)[1]);
			out[2] = (double)TinyImageFormat_LookupSRGB(((uint8_t const *)in->pixel)[2]);
			out[3] = ((double)((uint8_t const *)in->pixel)[3]) * 0.00392157;
			return true;}
		case TinyImageFormat_B8G8R8A8_UNORM: {
			out[2] = ((double)((uint8_t const *)in->pixel)[0]) * 0.00392157;
			out[1] = ((double)((uint8_t const *)in->pixel)[1]) * 0.00392157;
			out[0] = ((double)((uint8_t const *)in->pixel)[2]) * 0.00392157;
			out[3] = ((double)((uint8_t const *)in->pixel)[3]) * 0.00392157;
			return true;}
		case TinyImageFormat_B8G8R8A8_SNORM: {
			out[2] = (((double)((int8_t const *)in->pixel)[0]) * 0.00787402) - 1.0;
			out[1] = (((double)((int8_t const *)in->pixel)[1]) * 0.00787402) - 1.0;
			out[0] = (((double)((int8_t const *)in->pixel)[2]) * 0.00787402) - 1.0;
			out[3] = (((double)((int8_t const *)in->pixel)[3]) * 0.00787402) - 1.0;
			return true;}
		case TinyImageFormat_B8G8R8A8_UINT: {
			out[2] = (double)(((uint8_t const *)in->pixel))[0];
			out[1] = (double)(((uint8_t const *)in->pixel))[1];
			out[0] = (double)(((uint8_t const *)in->pixel))[2];
			out[3] = (double)(((uint8_t const *)in->pixel))[3];
			return true;}
		case TinyImageFormat_B8G8R8A8_SINT: {
			out[2] = ((double)(((int8_t const *)in->pixel))[0]) - 127.00000000;
			out[1] = ((double)(((int8_t const *)in->pixel))[1]) - 127.00000000;
			out[0] = ((double)(((int8_t const *)in->pixel))[2]) - 127.00000000;
			out[3] = ((double)(((int8_t const *)in->pixel))[3]) - 127.00000000;
			return true;}
		case TinyImageFormat_B8G8R8A8_SRGB: {
			out[2] = (double)TinyImageFormat_LookupSRGB(((uint8_t const *)in->pixel)[0]);
			out[1] = (double)TinyImageFormat_LookupSRGB(((uint8_t const *)in->pixel)[1]);
			out[0] = (double)TinyImageFormat_LookupSRGB(((uint8_t const *)in->pixel)[2]);
			out[3] = ((double)((uint8_t const *)in->pixel)[3]) * 0.00392157;
			return true;}
		case TinyImageFormat_R8G8B8X8_UNORM: {
			out[0] = ((double)((uint8_t const *)in->pixel)[0]) * 0.00392157;
			out[1] = ((double)((uint8_t const *)in->pixel)[1]) * 0.00392157;
			out[2] = ((double)((uint8_t const *)in->pixel)[2]) * 0.00392157;
			out[3] = 1;
			return true;}
		case TinyImageFormat_B8G8R8X8_UNORM: {
			out[2] = ((double)((uint8_t const *)in->pixel)[0]) * 0.00392157;
			out[1] = ((double)((uint8_t const *)in->pixel)[1]) * 0.00392157;
			out[0] = ((double)((uint8_t const *)in->pixel)[2]) * 0.00392157;
			out[3] = 1;
			return true;}
		case TinyImageFormat_R16G16_UNORM: {
			out[0] = ((double)((uint16_t const *)in->pixel)[0]) * 0.00001526;
			out[1] = ((double)((uint16_t const *)in->pixel)[1]) * 0.00001526;
			out[2] = 0;
			out[3] = 1;
			return true;}
		case TinyImageFormat_G16R16_UNORM: {
			out[1] = ((double)((uint16_t const *)in->pixel)[0]) * 0.00001526;
			out[0] = ((double)((uint16_t const *)in->pixel)[1]) * 0.00001526;
			out[2] = 0;
			out[3] = 1;
			return true;}
		case TinyImageFormat_R16G16_SNORM: {
			out[0] = (((double)((int16_t const *)in->pixel)[0]) * 0.00003052) - 1.0;
			out[1] = (((double)((int16_t const *)in->pixel)[1]) * 0.00003052) - 1.0;
			out[2] = 0;
			out[3] = 1;
			return true;}
		case TinyImageFormat_G16R16_SNORM: {
			out[1] = (((double)((int16_t const *)in->pixel)[0]) * 0.00003052) - 1.0;
			out[0] = (((double)((int16_t const *)in->pixel)[1]) * 0.00003052) - 1.0;
			out[2] = 0;
			out[3] = 1;
			return true;}
		case TinyImageFormat_R16G16_UINT: {
			out[0] = (double)(((uint16_t const *)in->pixel))[0];
			out[1] = (double)(((uint16_t const *)in->pixel))[1];
			out[2] = 0;
			out[3] = 1;
			return true;}
		case TinyImageFormat_R16G16_SINT: {
			out[0] = ((double)(((int16_t const *)in->pixel))[0]) - 32767.00000000;
			out[1] = ((double)(((int16_t const *)in->pixel))[1]) - 32767.00000000;
			out[2] = 0;
			out[3] = 1;
			return true;}
		case TinyImageFormat_R16G16_SFLOAT: {
			out[0] = TinyImageFormat_HalfAsUintToDouble((((uint16_t const *)in->pixel))[0]);
			out[1] = TinyImageFormat_HalfAsUintToDouble((((uint16_t const *)in->pixel))[1]);
			out[2] = 0;
			out[3] = 1;
			return true;}
		case TinyImageFormat_R16G16_SBFLOAT: {
			out[0] = TinyImageFormat_BFloatAsUintToDouble((((uint16_t const *)in->pixel))[0]);
			out[1] = TinyImageFormat_BFloatAsUintToDouble((((uint16_t const *)in->pixel))[1]);
			out[2] = 0;
			out[3] = 1;
			return true;}
		case TinyImageFormat_R32_UINT: {
			out[0] = (double)(((uint32_t const *)in->pixel))[0];
			out[1] = 0;
			out[2] = 0;
			out[3] = 1;
			return true;}
		case TinyImageFormat_R32_SINT: {
			out[0] = ((double)(((int32_t const *)in->pixel))[0]) - 2147483647.00000000;
			out[1] = 0;
			out[2] = 0;
			out[3] = 1;
			return true;}
		case TinyImageFormat_R32_SFLOAT: {
			out[0] = (double)(((float const *)in->pixel))[0];
			out[1] = 0;
			out[2] = 0;
			out[3] = 1;
			return true;}
		case TinyImageFormat_A2R10G10B10_UNORM: {
			uint32_t val = ((uint32_t const*)in->pixel)[0];
			out[3] = ((double)((val >> 0) & 0x3)) * 0.33333333;
			out[0] = ((double)((val >> 2) & 0x3ff)) * 0.00097752;
			out[1] = ((double)((val >> 12) & 0x3ff)) * 0.00097752;
			out[2] = ((double)((val >> 22) & 0x3ff)) * 0.00097752;
			return true;}
		case TinyImageFormat_A2R10G10B10_UINT: {
			uint32_t val = ((uint32_t const*)in->pixel)[0];
			out[3] = (double)((val >> 0) & 0x3);
			out[0] = (double)((val >> 2) & 0x3ff);
			out[1] = (double)((val >> 12) & 0x3ff);
			out[2] = (double)((val >> 22) & 0x3ff);
			return true;}
		case TinyImageFormat_A2B10G10R10_UNORM: {
			uint32_t val = ((uint32_t const*)in->pixel)[0];
			out[3] = ((double)((val >> 0) & 0x3)) * 0.33333333;
			out[2] = ((double)((val >> 2) & 0x3ff)) * 0.00097752;
			out[1] = ((double)((val >> 12) & 0x3ff)) * 0.00097752;
			out[0] = ((double)((val >> 22) & 0x3ff)) * 0.00097752;
			return true;}
		case TinyImageFormat_A2B10G10R10_UINT: {
			uint32_t val = ((uint32_t const*)in->pixel)[0];
			out[3] = (double)((val >> 0) & 0x3);
			out[2] = (double)((val >> 2) & 0x3ff);
			out[1] = (double)((val >> 12) & 0x3ff);
			out[0] = (double)((val >> 22) & 0x3ff);
			return true;}
		case TinyImageFormat_R10G10B10A2_UNORM: {
			uint32_t val = ((uint32_t const*)in->pixel)[0];
			out[0] = ((double)((val >> 0) & 0x3ff)) * 0.00097752;
			out[1] = ((double)((val >> 10) & 0x3ff)) * 0.00097752;
			out[2] = ((double)((val >> 20) & 0x3ff)) * 0.00097752;
			out[3] = ((double)((val >> 30) & 0x3)) * 0.33333333;
			return true;}
		case TinyImageFormat_B10G10R10A2_UNORM: {
			uint32_t val = ((uint32_t const*)in->pixel)[0];
			out[2] = ((double)((val >> 0) & 0x3ff)) * 0.00097752;
			out[1] = ((double)((val >> 10) & 0x3ff)) * 0.00097752;
			out[0] = ((double)((val >> 20) & 0x3ff)) * 0.00097752;
			out[3] = ((double)((val >> 30) & 0x3)) * 0.33333333;
			return true;}
		case TinyImageFormat_B10G10R10A2_UINT: {
			uint32_t val = ((uint32_t const*)in->pixel)[0];
			out[2] = (double)((val >> 0) & 0x3ff);
			out[1] = (double)((val >> 10) & 0x3ff);
			out[0] = (double)((val >> 20) & 0x3ff);
			out[3] = (double)((val >> 30) & 0x3);
			return true;}
		case TinyImageFormat_B10G11R11_UFLOAT: {
			uint32_t val = ((uint32_t const*)in->pixel)[0];
			out[2] = TinyImageFormat_UFloat10ToDouble((val >> 0) & 0x3ff);
			out[1] = TinyImageFormat_UFloat11ToDouble((val >> 10) & 0x7ff);
			out[0] = TinyImageFormat_UFloat11ToDouble((val >> 21) & 0x7ff);
			out[3] = 1;
			return true;}
		case TinyImageFormat_E5B9G9R9_UFLOAT: {
			TinyImageFormat_SharedE5B9G9R9UFloatToDoubles(*(uint32_t*)in, out);
			return true;}
		case TinyImageFormat_R16G16B16_UNORM: {
			out[0] = ((double)((uint16_t const *)in->pixel)[0]) * 0.00001526;
			out[1] = ((double)((uint16_t const *)in->pixel)[1]) * 0.00001526;
			out[2] = ((double)((uint16_t const *)in->pixel)[2]) * 0.00001526;
			out[3] = 1;
			return true;}
		case TinyImageFormat_R16G16B16_SNORM: {
			out[0] = (((double)((int16_t const *)in->pixel)[0]) * 0.00003052) - 1.0;
			out[1] = (((double)((int16_t const *)in->pixel)[1]) * 0.00003052) - 1.0;
			out[2] = (((double)((int16_t const *)in->pixel)[2]) * 0.00003052) - 1.0;
			out[3] = 1;
			return true;}
		case TinyImageFormat_R16G16B16_UINT: {
			out[0] = (double)(((uint16_t const *)in->pixel))[0];
			out[1] = (double)(((uint16_t const *)in->pixel))[1];
			out[2] = (double)(((uint16_t const *)in->pixel))[2];
			out[3] = 1;
			return true;}
		case TinyImageFormat_R16G16B16_SINT: {
			out[0] = ((double)(((int16_t const *)in->pixel))[0]) - 32767.00000000;
			out[1] = ((double)(((int16_t const *)in->pixel))[1]) - 32767.00000000;
			out[2] = ((double)(((int16_t const *)in->pixel))[2]) - 32767.00000000;
			out[3] = 1;
			return true;}
		case TinyImageFormat_R16G16B16_SFLOAT: {
			out[0] = TinyImageFormat_HalfAsUintToDouble((((uint16_t const *)in->pixel))[0]);
			out[1] = TinyImageFormat_HalfAsUintToDouble((((uint16_t const *)in->pixel))[1]);
			out[2] = TinyImageFormat_HalfAsUintToDouble((((uint16_t const *)in->pixel))[2]);
			out[3] = 1;
			return true;}
		case TinyImageFormat_R16G16B16_SBFLOAT: {
			out[0] = TinyImageFormat_BFloatAsUintToDouble((((uint16_t const *)in->pixel))[0]);
			out[1] = TinyImageFormat_BFloatAsUintToDouble((((uint16_t const *)in->pixel))[1]);
			out[2] = TinyImageFormat_BFloatAsUintToDouble((((uint16_t const *)in->pixel))[2]);
			out[3] = 1;
			return true;}
		case TinyImageFormat_R16G16B16A16_UNORM: {
			out[0] = ((double)((uint16_t const *)in->pixel)[0]) * 0.00001526;
			out[1] = ((double)((uint16_t const *)in->pixel)[1]) * 0.00001526;
			out[2] = ((double)((uint16_t const *)in->pixel)[2]) * 0.00001526;
			out[3] = ((double)((uint16_t const *)in->pixel)[3]) * 0.00001526;
			return true;}
		case TinyImageFormat_R16G16B16A16_SNORM: {
			out[0] = (((double)((int16_t const *)in->pixel)[0]) * 0.00003052) - 1.0;
			out[1] = (((double)((int16_t const *)in->pixel)[1]) * 0.00003052) - 1.0;
			out[2] = (((double)((int16_t const *)in->pixel)[2]) * 0.00003052) - 1.0;
			out[3] = (((double)((int16_t const *)in->pixel)[3]) * 0.00003052) - 1.0;
			return true;}
		case TinyImageFormat_R16G16B16A16_UINT: {
			out[0] = (double)(((uint16_t const *)in->pixel))[0];
			out[1] = (double)(((uint16_t const *)in->pixel))[1];
			out[2] = (double)(((uint16_t const *)in->pixel))[2];
			out[3] = (double)(((uint16_t const *)in->pixel))[3];
			return true;}
		case TinyImageFormat_R16G16B16A16_SINT: {
			out[0] = ((double)(((int16_t const *)in->pixel))[0]) - 32767.00000000;
			out[1] = ((double)(((int16_t const *)in->pixel))[1]) - 32767.00000000;
			out[2] = ((double)(((int16_t const *)in->pixel))[2]) - 32767.00000000;
			out[3] = ((double)(((int16_t const *)in->pixel))[3]) - 32767.00000000;
			return true;}
		case TinyImageFormat_R16G16B16A16_SFLOAT: {
			out[0] = TinyImageFormat_HalfAsUintToDouble((((uint16_t const *)in->pixel))[0]);
			out[1] = TinyImageFormat_HalfAsUintToDouble((((uint16_t const *)in->pixel))[1]);
			out[2] = TinyImageFormat_HalfAsUintToDouble((((uint16_t const *)in->pixel))[2]);
			out[3] = TinyImageFormat_HalfAsUintToDouble((((uint16_t const *)in->pixel))[3]);
			return true;}
		case TinyImageFormat_R16G16B16A16_SBFLOAT: {
			out[0] = TinyImageFormat_BFloatAsUintToDouble((((uint16_t const *)in->pixel))[0]);
			out[1] = TinyImageFormat_BFloatAsUintToDouble((((uint16_t const *)in->pixel))[1]);
			out[2] = TinyImageFormat_BFloatAsUintToDouble((((uint16_t const *)in->pixel))[2]);
			out[3] = TinyImageFormat_BFloatAsUintToDouble((((uint16_t const *)in->pixel))[3]);
			return true;}
		case TinyImageFormat_R32G32_UINT: {
			out[0] = (double)(((uint32_t const *)in->pixel))[0];
			out[1] = (double)(((uint32_t const *)in->pixel))[1];
			out[2] = 0;
			out[3] = 1;
			return true;}
		case TinyImageFormat_R32G32_SINT: {
			out[0] = ((double)(((int32_t const *)in->pixel))[0]) - 2147483647.00000000;
			out[1] = ((double)(((int32_t const *)in->pixel))[1]) - 2147483647.00000000;
			out[2] = 0;
			out[3] = 1;
			return true;}
		case TinyImageFormat_R32G32_SFLOAT: {
			out[0] = (double)(((float const *)in->pixel))[0];
			out[1] = (double)(((float const *)in->pixel))[1];
			out[2] = 0;
			out[3] = 1;
			return true;}
		case TinyImageFormat_R32G32B32_UINT: {
			out[0] = (double)(((uint32_t const *)in->pixel))[0];
			out[1] = (double)(((uint32_t const *)in->pixel))[1];
			out[2] = (double)(((uint32_t const *)in->pixel))[2];
			out[3] = 1;
			return true;}
		case TinyImageFormat_R32G32B32_SINT: {
			out[0] = ((double)(((int32_t const *)in->pixel))[0]) - 2147483647.00000000;
			out[1] = ((double)(((int32_t const *)in->pixel))[1]) - 2147483647.00000000;
			out[2] = ((double)(((int32_t const *)in->pixel))[2]) - 2147483647.00000000;
			out[3] = 1;
			return true;}
		case TinyImageFormat_R32G32B32_SFLOAT: {
			out[0] = (double)(((float const *)in->pixel))[0];
			out[1] = (double)(((float const *)in->pixel))[1];
			out[2] = (double)(((float const *)in->pixel))[2];
			out[3] = 1;
			return true;}
		case TinyImageFormat_R32G32B32A32_UINT: {
			out[0] = (double)(((uint32_t const *)in->pixel))[0];
			out[1] = (double)(((uint32_t const *)in->pixel))[1];
			out[2] = (double)(((uint32_t const *)in->pixel))[2];
			out[3] = (double)(((uint32_t const *)in->pixel))[3];
			return true;}
		case TinyImageFormat_R32G32B32A32_SINT: {
			out[0] = ((double)(((int32_t const *)in->pixel))[0]) - 2147483647.00000000;
			out[1] = ((double)(((int32_t const *)in->pixel))[1]) - 2147483647.00000000;
			out[2] = ((double)(((int32_t const *)in->pixel))[2]) - 2147483647.00000000;
			out[3] = ((double)(((int32_t const *)in->pixel))[3]) - 2147483647.00000000;
			return true;}
		case TinyImageFormat_R32G32B32A32_SFLOAT: {
			out[0] = (double)(((float const *)in->pixel))[0];
			out[1] = (double)(((float const *)in->pixel))[1];
			out[2] = (double)(((float const *)in->pixel))[2];
			out[3] = (double)(((float const *)in->pixel))[3];
			return true;}
		case TinyImageFormat_R64_UINT: {
			out[0] = (double)(((uint64_t const *)in->pixel))[0];
			out[1] = 0;
			out[2] = 0;
			out[3] = 1;
			return true;}
		case TinyImageFormat_R64_SINT: {
			out[0] = ((double)(((int64_t const *)in->pixel))[0]) - 9223372036854775808.00000000;
			out[1] = 0;
			out[2] = 0;
			out[3] = 1;
			return true;}
		case TinyImageFormat_R64_SFLOAT: {
			out[0] = (double)(((double const *)in->pixel))[0];
			out[1] = 0;
			out[2] = 0;
			out[3] = 1;
			return true;}
		case TinyImageFormat_R64G64_UINT: {
			out[0] = (double)(((uint64_t const *)in->pixel))[0];
			out[1] = (double)(((uint64_t const *)in->pixel))[1];
			out[2] = 0;
			out[3] = 1;
			return true;}
		case TinyImageFormat_R64G64_SINT: {
			out[0] = ((double)(((int64_t const *)in->pixel))[0]) - 9223372036854775808.00000000;
			out[1] = ((double)(((int64_t const *)in->pixel))[1]) - 9223372036854775808.00000000;
			out[2] = 0;
			out[3] = 1;
			return true;}
		case TinyImageFormat_R64G64_SFLOAT: {
			out[0] = (double)(((double const *)in->pixel))[0];
			out[1] = (double)(((double const *)in->pixel))[1];
			out[2] = 0;
			out[3] = 1;
			return true;}
		case TinyImageFormat_R64G64B64_UINT: {
			out[0] = (double)(((uint64_t const *)in->pixel))[0];
			out[1] = (double)(((uint64_t const *)in->pixel))[1];
			out[2] = (double)(((uint64_t const *)in->pixel))[2];
			out[3] = 1;
			return true;}
		case TinyImageFormat_R64G64B64_SINT: {
			out[0] = ((double)(((int64_t const *)in->pixel))[0]) - 9223372036854775808.00000000;
			out[1] = ((double)(((int64_t const *)in->pixel))[1]) - 9223372036854775808.00000000;
			out[2] = ((double)(((int64_t const *)in->pixel))[2]) - 9223372036854775808.00000000;
			out[3] = 1;
			return true;}
		case TinyImageFormat_R64G64B64_SFLOAT: {
			out[0] = (double)(((double const *)in->pixel))[0];
			out[1] = (double)(((double const *)in->pixel))[1];
			out[2] = (double)(((double const *)in->pixel))[2];
			out[3] = 1;
			return true;}
		case TinyImageFormat_R64G64B64A64_UINT: {
			out[0] = (double)(((uint64_t const *)in->pixel))[0];
			out[1] = (double)(((uint64_t const *)in->pixel))[1];
			out[2] = (double)(((uint64_t const *)in->pixel))[2];
			out[3] = (double)(((uint64_t const *)in->pixel))[3];
			return true;}
		case TinyImageFormat_R64G64B64A64_SINT: {
			out[0] = ((double)(((int64_t const *)in->pixel))[0]) - 9223372036854775808.00000000;
			out[1] = ((double)(((int64_t const *)in->pixel))[1]) - 9223372036854775808.00000000;
			out[2] = ((double)(((int64_t const *)in->pixel))[2]) - 9223372036854775808.00000000;
			out[3] = ((double)(((int64_t const *)in->pixel))[3]) - 9223372036854775808.00000000;
			return true;}
		case TinyImageFormat_R64G64B64A64_SFLOAT: {
			out[0] = (double)(((double const *)in->pixel))[0];
			out[1] = (double)(((double const *)in->pixel))[1];
			out[2] = (double)(((double const *)in->pixel))[2];
			out[3] = (double)(((double const *)in->pixel))[3];
			return true;}
		default: return false;
	}
}

#undef TIF_CONSTEXPR

